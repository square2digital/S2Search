// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.CustomerResourceApi.Client.AutoRest
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CustomerResourceApiClient.
    /// </summary>
    public static partial class CustomerResourceApiClientExtensions
    {
            /// <summary>
            /// Gets the Customer by customerId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            public static object GetCustomer(this ICustomerResourceApiClient operations, System.Guid customerId)
            {
                return operations.GetCustomerAsync(customerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Customer by customerId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCustomerAsync(this ICustomerResourceApiClient operations, System.Guid customerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCustomerWithHttpMessagesAsync(customerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Customer and their Search Indexes (CustomerFull) by customerId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            public static object GetCustomerAndSearchIndexes(this ICustomerResourceApiClient operations, System.Guid customerId)
            {
                return operations.GetCustomerAndSearchIndexesAsync(customerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Customer and their Search Indexes (CustomerFull) by customerId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetCustomerAndSearchIndexesAsync(this ICustomerResourceApiClient operations, System.Guid customerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCustomerAndSearchIndexesWithHttpMessagesAsync(customerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the customers dashboard summary data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            public static IList<DashboardSummaryItem> GetDashboardSummary(this ICustomerResourceApiClient operations, System.Guid customerId)
            {
                return operations.GetDashboardSummaryAsync(customerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the customers dashboard summary data
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<DashboardSummaryItem>> GetDashboardSummaryAsync(this ICustomerResourceApiClient operations, System.Guid customerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDashboardSummaryWithHttpMessagesAsync(customerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a request to create a Feed user account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProblemDetails CreateUser(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, CreateUserRequest body = default(CreateUserRequest))
            {
                return operations.CreateUserAsync(customerId, searchIndexId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a request to create a Feed user account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> CreateUserAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, CreateUserRequest body = default(CreateUserRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserWithHttpMessagesAsync(customerId, searchIndexId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a request to delete a Feed user account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='username'>
            /// </param>
            public static ProblemDetails DeleteUser(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, string username)
            {
                return operations.DeleteUserAsync(customerId, searchIndexId, username).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a request to delete a Feed user account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='username'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> DeleteUserAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, string username, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteUserWithHttpMessagesAsync(customerId, searchIndexId, username, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a request to update the status of a Feed user account.
            /// 'Status' being whether the user is enabled or disabled.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProblemDetails UpdateUserStatus(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, UpdateUserStatusRequest body = default(UpdateUserStatusRequest))
            {
                return operations.UpdateUserStatusAsync(customerId, searchIndexId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a request to update the status of a Feed user account.
            /// 'Status' being whether the user is enabled or disabled.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> UpdateUserStatusAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, UpdateUserStatusRequest body = default(UpdateUserStatusRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserStatusWithHttpMessagesAsync(customerId, searchIndexId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a request to update the password of a Feed user account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProblemDetails UpdateUserPassword(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, UpdatePasswordRequest body = default(UpdatePasswordRequest))
            {
                return operations.UpdateUserPasswordAsync(customerId, searchIndexId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a request to update the password of a Feed user account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> UpdateUserPasswordAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, UpdatePasswordRequest body = default(UpdatePasswordRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateUserPasswordWithHttpMessagesAsync(customerId, searchIndexId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a FeedCredentials object by SearchIndexId.
            /// This contains the username, date created and date modified.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            public static ProblemDetails GetCredentials(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId)
            {
                return operations.GetCredentialsAsync(customerId, searchIndexId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a FeedCredentials object by SearchIndexId.
            /// This contains the username, date created and date modified.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> GetCredentialsAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCredentialsWithHttpMessagesAsync(customerId, searchIndexId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the latest feed configuration for a search index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            public static object GetLatestFeedConfiguration(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId)
            {
                return operations.GetLatestFeedConfigurationAsync(customerId, searchIndexId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the latest feed configuration for a search index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLatestFeedConfigurationAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLatestFeedConfigurationWithHttpMessagesAsync(customerId, searchIndexId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a feed configuration entry and supersedes any previously existing
            /// feed configuration entries
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object SaveFeedConfiguration(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, FeedRequest body = default(FeedRequest))
            {
                return operations.SaveFeedConfigurationAsync(customerId, searchIndexId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a feed configuration entry and supersedes any previously existing
            /// feed configuration entries
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SaveFeedConfigurationAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, FeedRequest body = default(FeedRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SaveFeedConfigurationWithHttpMessagesAsync(customerId, searchIndexId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads a feed file for processing
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='feedFile'>
            /// </param>
            public static ProblemDetails UploadFeedFile(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, string feedFile = default(string))
            {
                return operations.UploadFeedFileAsync(customerId, searchIndexId, feedFile).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Uploads a feed file for processing
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='feedFile'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> UploadFeedFileAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, string feedFile = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadFeedFileWithHttpMessagesAsync(customerId, searchIndexId, feedFile, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            public static IList<SearchIndexKeys> GetKeys(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId)
            {
                return operations.GetKeysAsync(customerId, searchIndexId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<SearchIndexKeys>> GetKeysAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetKeysWithHttpMessagesAsync(customerId, searchIndexId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreateKeys(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, SearchIndexKeyGenerationRequest body = default(SearchIndexKeyGenerationRequest))
            {
                return operations.CreateKeysAsync(customerId, searchIndexId, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateKeysAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, SearchIndexKeyGenerationRequest body = default(SearchIndexKeyGenerationRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateKeysWithHttpMessagesAsync(customerId, searchIndexId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void DeleteKeys(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, SearchIndexKeyDeletionRequest body = default(SearchIndexKeyDeletionRequest))
            {
                operations.DeleteKeysAsync(customerId, searchIndexId, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteKeysAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, SearchIndexKeyDeletionRequest body = default(SearchIndexKeyDeletionRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteKeysWithHttpMessagesAsync(customerId, searchIndexId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all the notification rules for a search index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            public static IList<NotificationRule> GetNotificationRules(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId)
            {
                return operations.GetNotificationRulesAsync(customerId, searchIndexId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the notification rules for a search index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NotificationRule>> GetNotificationRulesAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotificationRulesWithHttpMessagesAsync(customerId, searchIndexId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a notification rule for a search index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreateNotificationRule(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, NotificationRuleRequest body = default(NotificationRuleRequest))
            {
                return operations.CreateNotificationRuleAsync(customerId, searchIndexId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a notification rule for a search index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateNotificationRuleAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, NotificationRuleRequest body = default(NotificationRuleRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateNotificationRuleWithHttpMessagesAsync(customerId, searchIndexId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific notification rule by notificationId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='notificationRuleId'>
            /// </param>
            public static object GetNotificationRuleById(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, int notificationRuleId)
            {
                return operations.GetNotificationRuleByIdAsync(customerId, searchIndexId, notificationRuleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific notification rule by notificationId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='notificationRuleId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetNotificationRuleByIdAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, int notificationRuleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotificationRuleByIdWithHttpMessagesAsync(customerId, searchIndexId, notificationRuleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a notification rule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='notificationRuleId'>
            /// </param>
            public static void DeleteNotificationRule(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, int notificationRuleId)
            {
                operations.DeleteNotificationRuleAsync(customerId, searchIndexId, notificationRuleId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a notification rule
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='notificationRuleId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteNotificationRuleAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, int notificationRuleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteNotificationRuleWithHttpMessagesAsync(customerId, searchIndexId, notificationRuleId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all the notifications for a search index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            public static NotificationPagedResults GetNotifications(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, int? page = default(int?), int? pageSize = default(int?))
            {
                return operations.GetNotificationsAsync(customerId, searchIndexId, page, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the notifications for a search index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='pageSize'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NotificationPagedResults> GetNotificationsAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, int? page = default(int?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNotificationsWithHttpMessagesAsync(customerId, searchIndexId, page, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerEndpoint'>
            /// </param>
            public static object GetSearchIndexQueryCredentials(this ICustomerResourceApiClient operations, string customerEndpoint)
            {
                return operations.GetSearchIndexQueryCredentialsAsync(customerEndpoint).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerEndpoint'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSearchIndexQueryCredentialsAsync(this ICustomerResourceApiClient operations, string customerEndpoint, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSearchIndexQueryCredentialsWithHttpMessagesAsync(customerEndpoint, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='fullResource'>
            /// </param>
            public static object GetSearchIndex(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, bool? fullResource = false)
            {
                return operations.GetSearchIndexAsync(customerId, searchIndexId, fullResource).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='fullResource'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSearchIndexAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, bool? fullResource = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSearchIndexWithHttpMessagesAsync(customerId, searchIndexId, fullResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            public static ProblemDetails DeleteSearchIndex(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId)
            {
                return operations.DeleteSearchIndexAsync(customerId, searchIndexId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> DeleteSearchIndexAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSearchIndexWithHttpMessagesAsync(customerId, searchIndexId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='friendlyName'>
            /// </param>
            public static object GetSearchIndexByName(this ICustomerResourceApiClient operations, System.Guid customerId, string friendlyName)
            {
                return operations.GetSearchIndexByNameAsync(customerId, friendlyName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='friendlyName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSearchIndexByNameAsync(this ICustomerResourceApiClient operations, System.Guid customerId, string friendlyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSearchIndexByNameWithHttpMessagesAsync(customerId, friendlyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            public static IList<CustomerPricingTier> GetSearchIndexPricing(this ICustomerResourceApiClient operations, System.Guid customerId)
            {
                return operations.GetSearchIndexPricingAsync(customerId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CustomerPricingTier>> GetSearchIndexPricingAsync(this ICustomerResourceApiClient operations, System.Guid customerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSearchIndexPricingWithHttpMessagesAsync(customerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ProblemDetails CreateSearchIndex(this ICustomerResourceApiClient operations, System.Guid customerId, SearchIndexRequest body = default(SearchIndexRequest))
            {
                return operations.CreateSearchIndexAsync(customerId, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> CreateSearchIndexAsync(this ICustomerResourceApiClient operations, System.Guid customerId, SearchIndexRequest body = default(SearchIndexRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSearchIndexWithHttpMessagesAsync(customerId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the latest search interface configuration for a search index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            public static object GetLatestSearchInterface(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId)
            {
                return operations.GetLatestSearchInterfaceAsync(customerId, searchIndexId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the latest search interface configuration for a search index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetLatestSearchInterfaceAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLatestSearchInterfaceWithHttpMessagesAsync(customerId, searchIndexId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a search interface configuration entry and supersedes and previous
            /// entry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreateSearchInterface(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, SearchInterfaceRequest body = default(SearchInterfaceRequest))
            {
                return operations.CreateSearchInterfaceAsync(customerId, searchIndexId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a search interface configuration entry and supersedes and previous
            /// entry
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateSearchInterfaceAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, SearchInterfaceRequest body = default(SearchInterfaceRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSearchInterfaceWithHttpMessagesAsync(customerId, searchIndexId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void GetStatus(this ICustomerResourceApiClient operations)
            {
                operations.GetStatusAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetStatusAsync(this ICustomerResourceApiClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetStatusWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets all the synonyms for a search index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            public static IList<Synonym> GetSynonyms(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId)
            {
                return operations.GetSynonymsAsync(customerId, searchIndexId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the synonyms for a search index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Synonym>> GetSynonymsAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSynonymsWithHttpMessagesAsync(customerId, searchIndexId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a synonym for a search index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object CreateSynonym(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, SynonymRequest body = default(SynonymRequest))
            {
                return operations.CreateSynonymAsync(customerId, searchIndexId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a synonym for a search index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateSynonymAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, SynonymRequest body = default(SynonymRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSynonymWithHttpMessagesAsync(customerId, searchIndexId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific synonym by synonymId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='synonymId'>
            /// </param>
            public static object GetSynonymById(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, System.Guid synonymId)
            {
                return operations.GetSynonymByIdAsync(customerId, searchIndexId, synonymId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific synonym by synonymId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='synonymId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetSynonymByIdAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, System.Guid synonymId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSynonymByIdWithHttpMessagesAsync(customerId, searchIndexId, synonymId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a synonym
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='synonymId'>
            /// </param>
            public static ProblemDetails DeleteSynonym(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, System.Guid synonymId)
            {
                return operations.DeleteSynonymAsync(customerId, searchIndexId, synonymId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a synonym
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='synonymId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProblemDetails> DeleteSynonymAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, System.Guid synonymId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSynonymWithHttpMessagesAsync(customerId, searchIndexId, synonymId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update synonym
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='synoynmId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static object UpdateSynonym(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, System.Guid synoynmId, SynonymRequest body = default(SynonymRequest))
            {
                return operations.UpdateSynonymAsync(customerId, searchIndexId, synoynmId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update synonym
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='synoynmId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateSynonymAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, System.Guid synoynmId, SynonymRequest body = default(SynonymRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSynonymWithHttpMessagesAsync(customerId, searchIndexId, synoynmId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the theme by the themeId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='themeId'>
            /// </param>
            public static Theme GetThemeById(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, System.Guid themeId)
            {
                return operations.GetThemeByIdAsync(customerId, searchIndexId, themeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the theme by the themeId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='themeId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Theme> GetThemeByIdAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, System.Guid themeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetThemeByIdWithHttpMessagesAsync(customerId, searchIndexId, themeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the theme associated to the Search Index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            public static Theme GetThemeBySearchIndexId(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId)
            {
                return operations.GetThemeBySearchIndexIdAsync(customerId, searchIndexId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the theme associated to the Search Index
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Theme> GetThemeBySearchIndexIdAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetThemeBySearchIndexIdWithHttpMessagesAsync(customerId, searchIndexId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all themes associated to the CustomerId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            public static ThemeCollection GetThemesByCustomerId(this ICustomerResourceApiClient operations, System.Guid customerId, string searchIndexId)
            {
                return operations.GetThemesByCustomerIdAsync(customerId, searchIndexId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all themes associated to the CustomerId
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ThemeCollection> GetThemesByCustomerIdAsync(this ICustomerResourceApiClient operations, System.Guid customerId, string searchIndexId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetThemesByCustomerIdWithHttpMessagesAsync(customerId, searchIndexId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates Theme with new values
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Theme UpdateTheme(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, ThemeRequest body = default(ThemeRequest))
            {
                return operations.UpdateThemeAsync(customerId, searchIndexId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates Theme with new values
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='searchIndexId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Theme> UpdateThemeAsync(this ICustomerResourceApiClient operations, System.Guid customerId, System.Guid searchIndexId, ThemeRequest body = default(ThemeRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateThemeWithHttpMessagesAsync(customerId, searchIndexId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
