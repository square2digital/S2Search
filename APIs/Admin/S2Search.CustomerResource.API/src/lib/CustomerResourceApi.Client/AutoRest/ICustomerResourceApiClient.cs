// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.CustomerResourceApi.Client.AutoRest
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    public partial interface ICustomerResourceApiClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Gets the Customer by customerId
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCustomerWithHttpMessagesAsync(System.Guid customerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the Customer and their Search Indexes (CustomerFull) by
        /// customerId
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetCustomerAndSearchIndexesWithHttpMessagesAsync(System.Guid customerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the customers dashboard summary data
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<DashboardSummaryItem>>> GetDashboardSummaryWithHttpMessagesAsync(System.Guid customerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends a request to create a Feed user account
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProblemDetails>> CreateUserWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, CreateUserRequest body = default(CreateUserRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends a request to delete a Feed user account
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='username'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProblemDetails>> DeleteUserWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, string username, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends a request to update the status of a Feed user account.
        /// 'Status' being whether the user is enabled or disabled.
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProblemDetails>> UpdateUserStatusWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, UpdateUserStatusRequest body = default(UpdateUserStatusRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends a request to update the password of a Feed user account.
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProblemDetails>> UpdateUserPasswordWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, UpdatePasswordRequest body = default(UpdatePasswordRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a FeedCredentials object by SearchIndexId.
        /// This contains the username, date created and date modified.
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProblemDetails>> GetCredentialsWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the latest feed configuration for a search index
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetLatestFeedConfigurationWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a feed configuration entry and supersedes any previously
        /// existing feed configuration entries
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> SaveFeedConfigurationWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, FeedRequest body = default(FeedRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Uploads a feed file for processing
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='feedFile'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProblemDetails>> UploadFeedFileWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, string feedFile = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<SearchIndexKeys>>> GetKeysWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateKeysWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, SearchIndexKeyGenerationRequest body = default(SearchIndexKeyGenerationRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteKeysWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, SearchIndexKeyDeletionRequest body = default(SearchIndexKeyDeletionRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all the notification rules for a search index
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<NotificationRule>>> GetNotificationRulesWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a notification rule for a search index
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateNotificationRuleWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, NotificationRuleRequest body = default(NotificationRuleRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a specific notification rule by notificationId
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='notificationRuleId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetNotificationRuleByIdWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, int notificationRuleId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a notification rule
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='notificationRuleId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteNotificationRuleWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, int notificationRuleId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all the notifications for a search index
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<NotificationPagedResults>> GetNotificationsWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, int? page = default(int?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customerEndpoint'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetSearchIndexQueryCredentialsWithHttpMessagesAsync(string customerEndpoint, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='fullResource'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetSearchIndexWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, bool? fullResource = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProblemDetails>> DeleteSearchIndexWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customerId'>
        /// </param>
        /// <param name='friendlyName'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetSearchIndexByNameWithHttpMessagesAsync(System.Guid customerId, string friendlyName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customerId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<CustomerPricingTier>>> GetSearchIndexPricingWithHttpMessagesAsync(System.Guid customerId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customerId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProblemDetails>> CreateSearchIndexWithHttpMessagesAsync(System.Guid customerId, SearchIndexRequest body = default(SearchIndexRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the latest search interface configuration for a search index
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetLatestSearchInterfaceWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a search interface configuration entry and supersedes and
        /// previous entry
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateSearchInterfaceWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, SearchInterfaceRequest body = default(SearchInterfaceRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetStatusWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all the synonyms for a search index
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Synonym>>> GetSynonymsWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a synonym for a search index
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateSynonymWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, SynonymRequest body = default(SynonymRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets a specific synonym by synonymId
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='synonymId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetSynonymByIdWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, System.Guid synonymId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes a synonym
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='synonymId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProblemDetails>> DeleteSynonymWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, System.Guid synonymId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update synonym
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='synoynmId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateSynonymWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, System.Guid synoynmId, SynonymRequest body = default(SynonymRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the theme by the themeId
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='themeId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Theme>> GetThemeByIdWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, System.Guid themeId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets the theme associated to the Search Index
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Theme>> GetThemeBySearchIndexIdWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Gets all themes associated to the CustomerId
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ThemeCollection>> GetThemesByCustomerIdWithHttpMessagesAsync(System.Guid customerId, string searchIndexId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates Theme with new values
        /// </summary>
        /// <param name='customerId'>
        /// </param>
        /// <param name='searchIndexId'>
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Theme>> UpdateThemeWithHttpMessagesAsync(System.Guid customerId, System.Guid searchIndexId, ThemeRequest body = default(ThemeRequest), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
