// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace S2Search.CustomerResourceApi.Client.AutoRest.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class SynonymRequest
    {
        /// <summary>
        /// Initializes a new instance of the SynonymRequest class.
        /// </summary>
        public SynonymRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SynonymRequest class.
        /// </summary>
        public SynonymRequest(System.Guid searchIndexId, string keyWord, IList<string> synonyms, System.Guid? synonymId = default(System.Guid?))
        {
            SynonymId = synonymId;
            SearchIndexId = searchIndexId;
            KeyWord = keyWord;
            Synonyms = synonyms;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "synonymId")]
        public System.Guid? SynonymId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "searchIndexId")]
        public System.Guid SearchIndexId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "keyWord")]
        public string KeyWord { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "synonyms")]
        public IList<string> Synonyms { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (KeyWord == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyWord");
            }
            if (Synonyms == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Synonyms");
            }
        }
    }
}
