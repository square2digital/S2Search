# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
  - main

variables:
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"
  vstsFeed: "8806f2ad-d1f9-4f70-a901-b5c4d0bd18c3"
  containerNamespace: "dp-dev0"
  containerRegistryConnection: "GitLab"
  containerRepository: "$(containerNamespace)/s2search/searchapi"
  dockerfilePath: "**/Dockerfile"
  dockerBuildContext: "$(Build.ArtifactStagingDirectory)/Search"
  DOCKER_BUILDKIT: 1

stages:
  - stage: Build
    displayName: Build image
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: ubuntu-latest
        continueOnError: false
        steps:
          - task: CopyFiles@2
            displayName: Copy Deployment Files
            inputs:
              SourceFolder: "$(System.DefaultWorkingDirectory)/deploy"
              Contents: "**"
              TargetFolder: "$(Build.ArtifactStagingDirectory)/deploy"

          - task: CopyFiles@2
            displayName: Copy appsettings.Kubernetes.json
            inputs:
              SourceFolder: "$(System.DefaultWorkingDirectory)/Search"
              Contents: "appsettings.Kubernetes.json"
              TargetFolder: "$(Build.ArtifactStagingDirectory)/deploy"

          - task: DotNetCoreCLI@2
            displayName: Dotnet Restore
            inputs:
              command: "restore"
              projects: "**/Search.csproj"
              feedsToUse: "select"
              vstsFeed: "$(vstsFeed)"

          - task: DotNetCoreCLI@2
            displayName: Dotnet Build
            inputs:
              command: "build"
              projects: "**/Search.csproj"
              arguments: "-c $(buildConfiguration)"

          - task: DotNetCoreCLI@2
            displayName: Dotnet Test
            inputs:
              command: "test"
              projects: "**/Tests.csproj"

          - task: DotNetCoreCLI@2
            displayName: Dotnet Publish
            inputs:
              command: "publish"
              publishWebProjects: true
              arguments: "--output $(Build.ArtifactStagingDirectory) -c $(buildConfiguration)"
              zipAfterPublish: false

          - task: PublishBuildArtifacts@1
            displayName: Publish Artifacts
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "drop"
              publishLocation: "Container"

          - task: CmdLine@2
            inputs:
              script: "dir"
              workingDirectory: "$(dockerBuildContext)"

          - task: Docker@2
            displayName: Build docker image
            inputs:
              containerRegistry: "$(containerRegistryConnection)"
              repository: "$(containerRepository)"
              command: "build"
              Dockerfile: "$(dockerfilePath)"
              buildContext: "$(dockerBuildContext)"
              tags: |
                $(Build.BuildId)
                latest
              addPipelineData: false
              addBaseImageData: false

          - task: Docker@2
            displayName: Push docker image
            inputs:
              containerRegistry: "$(containerRegistryConnection)"
              repository: "$(containerRepository)"
              command: "push"
              tags: |
                $(Build.BuildId)
                latest
              addPipelineData: false
              addBaseImageData: false

  - stage: DeployDev
    displayName: Deploy to Dev [Kubernetes]
    variables:
      deploymentScriptsPath: "$(Agent.BuildDirectory)/drop/deploy"
    jobs:
      - deployment: Deploy
        displayName: Deploy Web App
        pool:
          vmImage: "ubuntu-latest"
        # Creates an environment if it doesn't exist.
        environment: "dev"
        strategy:
          # Default deployment strategy
          runOnce:
            deploy:
              steps:
                - task: PowerShell@2
                  displayName: Validate Settings
                  inputs:
                    filePath: "$(deploymentScriptsPath)/validate-settings.ps1"
                    workingDirectory: "$(System.DefaultWorkingDirectory)"
                  env:
                    SEARCHCREDENTIALSQUERYKEY: $(SearchCredentialsQueryKey)

                - task: PowerShell@2
                  displayName: Create AppSettings variable
                  inputs:
                    filePath: "$(deploymentScriptsPath)/create-appsettings.ps1"
                    workingDirectory: "$(System.DefaultWorkingDirectory)"
                  env:
                    SEARCHCREDENTIALSQUERYKEY: $(SearchCredentialsQueryKey)

                - task: PowerShell@2
                  displayName: Inject Variables into AppSettings
                  inputs:
                    filePath: "$(deploymentScriptsPath)/replace.ps1"
                    workingDirectory: "$(System.DefaultWorkingDirectory)"
                  env:
                    SEARCHCREDENTIALSQUERYKEY: $(SearchCredentialsQueryKey)

                - task: PowerShell@2
                  displayName: Verify AppSettings
                  inputs:
                    filePath: "$(deploymentScriptsPath)/verify-replace.ps1"
                    workingDirectory: "$(System.DefaultWorkingDirectory)"

                - task: KubernetesManifest@0
                  displayName: Deploy AppSettings
                  inputs:
                    action: "deploy"
                    kubernetesServiceConnection: "Okteto"
                    namespace: $(Namespace)
                    manifests: "$(deploymentScriptsPath)/deploy-api-appsettings.yml"

                - task: KubernetesManifest@0
                  displayName: Deploy API
                  inputs:
                    action: "deploy"
                    kubernetesServiceConnection: "Okteto"
                    namespace: $(Namespace)
                    manifests: "$(deploymentScriptsPath)/deploy-api-deployment.yml"

                - task: KubernetesManifest@0
                  displayName: Deploy Service
                  inputs:
                    action: "deploy"
                    kubernetesServiceConnection: "Okteto"
                    namespace: $(Namespace)
                    manifests: "$(deploymentScriptsPath)/deploy-api-service-okteto.yml"
