/*
Deployment script for S2_Search

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "S2_Search"
:setvar DefaultFilePrefix "S2_Search"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                DATE_CORRELATION_OPTIMIZATION OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, OPERATION_MODE = READ_WRITE, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating Schema [Admin]...';


GO
CREATE SCHEMA [Admin]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [Configuration]...';


GO
CREATE SCHEMA [Configuration]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [FeedServicesFunc]...';


GO
CREATE SCHEMA [FeedServicesFunc]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [insights]...';


GO
CREATE SCHEMA [insights]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [ProvisioningServicesFunc]...';


GO
CREATE SCHEMA [ProvisioningServicesFunc]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [SearchInsightsFunc]...';


GO
CREATE SCHEMA [SearchInsightsFunc]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating Schema [SFTPGoServicesFunc]...';


GO
CREATE SCHEMA [SFTPGoServicesFunc]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating User [Admin]...';


GO
CREATE USER [Admin] FOR LOGIN [Admin]
    WITH DEFAULT_SCHEMA = [Admin];


GO
REVOKE CONNECT TO [Admin];


GO
PRINT N'Creating User [FeedServicesFunc]...';


GO
CREATE USER [FeedServicesFunc] FOR LOGIN [FeedServicesFunc]
    WITH DEFAULT_SCHEMA = [FeedServicesFunc];


GO
REVOKE CONNECT TO [FeedServicesFunc];


GO
PRINT N'Creating User [ProvisioningServicesFunc]...';


GO
CREATE USER [ProvisioningServicesFunc] FOR LOGIN [ProvisioningServicesFunc]
    WITH DEFAULT_SCHEMA = [ProvisioningServicesFunc];


GO
REVOKE CONNECT TO [ProvisioningServicesFunc];


GO
PRINT N'Creating User [SearchInsightsFunc]...';


GO
CREATE USER [SearchInsightsFunc] FOR LOGIN [SearchInsightsFunc]
    WITH DEFAULT_SCHEMA = [SearchInsightsFunc];


GO
REVOKE CONNECT TO [SearchInsightsFunc];


GO
PRINT N'Creating User [SFTPGoServicesFunc]...';


GO
CREATE USER [SFTPGoServicesFunc] FOR LOGIN [SFTPGoServicesFunc]
    WITH DEFAULT_SCHEMA = [SFTPGoServicesFunc];


GO
REVOKE CONNECT TO [SFTPGoServicesFunc];


GO
PRINT N'Creating User-Defined Table Type [FeedServicesFunc].[NewFeedDocuments]...';


GO
CREATE TYPE [FeedServicesFunc].[NewFeedDocuments] AS TABLE (
    [DocumentId] VARCHAR (50) NOT NULL);


GO
PRINT N'Creating User-Defined Table Type [SearchInsightsFunc].[SearchInsightsData]...';


GO
CREATE TYPE [SearchInsightsFunc].[SearchInsightsData] AS TABLE (
    [DataCategory] VARCHAR (50)   NOT NULL,
    [DataPoint]    VARCHAR (1000) NOT NULL,
    [Date]         DATE           NOT NULL);


GO
PRINT N'Creating Table [insights].[SearchInsightsData]...';


GO
CREATE TABLE [insights].[SearchInsightsData] (
    [Id]            INT              IDENTITY (1, 1) NOT NULL,
    [SearchIndexId] UNIQUEIDENTIFIER NOT NULL,
    [DataCategory]  VARCHAR (50)     NOT NULL,
    [DataPoint]     VARCHAR (1000)   NOT NULL,
    [Count]         INT              NOT NULL,
    [Date]          DATE             NOT NULL,
    [ModifiedDate]  DATETIME         NOT NULL,
    CONSTRAINT [PK_SearchInsightsData] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [insights].[SearchIndexRequestLog]...';


GO
CREATE TABLE [insights].[SearchIndexRequestLog] (
    [Id]            INT              IDENTITY (1, 1) NOT NULL,
    [SearchIndexId] UNIQUEIDENTIFIER NOT NULL,
    [Count]         INT              NOT NULL,
    [Date]          DATE             NOT NULL,
    [ModifiedDate]  DATETIME         NOT NULL,
    CONSTRAINT [PK_SearchIndexRequestLog] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Customers]...';


GO
CREATE TABLE [dbo].[Customers] (
    [CustomerId]   UNIQUEIDENTIFIER NOT NULL,
    [BusinessName] VARCHAR (100)    NULL,
    [CreatedDate]  DATETIME         NOT NULL,
    [ModifiedDate] DATETIME         NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED ([CustomerId] ASC)
);


GO
PRINT N'Creating Table [dbo].[FeedCredentials]...';


GO
CREATE TABLE [dbo].[FeedCredentials] (
    [Id]            UNIQUEIDENTIFIER NOT NULL,
    [SearchIndexId] UNIQUEIDENTIFIER NOT NULL,
    [Username]      VARCHAR (50)     NOT NULL,
    [PasswordHash]  VARCHAR (MAX)    NOT NULL,
    [CreatedDate]   DATETIME         NOT NULL,
    [ModifiedDate]  DATETIME         NULL
);


GO
PRINT N'Creating Table [dbo].[FeedCurrentDocuments]...';


GO
CREATE TABLE [dbo].[FeedCurrentDocuments] (
    [DocumentId]    VARCHAR (50)     NOT NULL,
    [SearchIndexId] UNIQUEIDENTIFIER NOT NULL,
    [CreatedDate]   DATETIME         NOT NULL
);


GO
PRINT N'Creating Index [dbo].[FeedCurrentDocuments].[ix-DocumentIdForSearchIndexId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [ix-DocumentIdForSearchIndexId]
    ON [dbo].[FeedCurrentDocuments]([DocumentId] ASC, [SearchIndexId] ASC);


GO
PRINT N'Creating Table [dbo].[Feeds]...';


GO
CREATE TABLE [dbo].[Feeds] (
    [FeedId]           INT              IDENTITY (1, 1) NOT NULL,
    [FeedType]         VARCHAR (20)     NOT NULL,
    [FeedScheduleCron] VARCHAR (255)    NOT NULL,
    [SearchIndexId]    UNIQUEIDENTIFIER NOT NULL,
    [DataFormat]       VARCHAR (50)     NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    [SupersededDate]   DATETIME         NULL,
    [IsLatest]         BIT              NOT NULL,
    CONSTRAINT [PK_Feeds] PRIMARY KEY CLUSTERED ([FeedId] ASC)
);


GO
PRINT N'Creating Table [dbo].[GenericSynonyms]...';


GO
CREATE TABLE [dbo].[GenericSynonyms] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [Category]       VARCHAR (50)     NOT NULL,
    [SolrFormat]     VARCHAR (MAX)    NOT NULL,
    [CreatedDate]    DATETIME         NOT NULL,
    [SupersededDate] DATETIME         NULL,
    [IsLatest]       BIT              NOT NULL
);


GO
PRINT N'Creating Table [dbo].[SearchIndex]...';


GO
CREATE TABLE [dbo].[SearchIndex] (
    [SearchIndexId]    UNIQUEIDENTIFIER NOT NULL,
    [CustomerId]       UNIQUEIDENTIFIER NOT NULL,
    [SearchInstanceId] UNIQUEIDENTIFIER NULL,
    [IndexName]        VARCHAR (60)     NOT NULL,
    [FriendlyName]     VARCHAR (100)    NOT NULL,
    [PricingSkuId]     VARCHAR (50)     NOT NULL,
    [CreatedDate]      DATETIME         NOT NULL,
    CONSTRAINT [PK_SearchIndex] PRIMARY KEY CLUSTERED ([SearchIndexId] ASC)
);


GO
PRINT N'Creating Table [dbo].[SearchIndexKeys]...';


GO
CREATE TABLE [dbo].[SearchIndexKeys] (
    [Id]                  INT              IDENTITY (1, 1) NOT NULL,
    [SearchIndexId]       UNIQUEIDENTIFIER NOT NULL,
    [Name]                VARCHAR (100)    NOT NULL,
    [SearchInstanceKeyId] UNIQUEIDENTIFIER NOT NULL,
    [CreatedDate]         DATETIME         NOT NULL,
    CONSTRAINT [PK_SearchIndexKeys] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[SearchInstanceCapacity]...';


GO
CREATE TABLE [dbo].[SearchInstanceCapacity] (
    [Id]               INT              IDENTITY (1, 1) NOT NULL,
    [SearchInstanceId] UNIQUEIDENTIFIER NOT NULL,
    [StorageQuotaMB]   DECIMAL (18, 2)  NOT NULL,
    [IndexesQuota]     INT              NOT NULL,
    [StorageUsedMB]    DECIMAL (18, 2)  NOT NULL,
    [IndexesUsed]      INT              NOT NULL,
    [IndexesReserved]  INT              NOT NULL,
    [IndexesAvailable] INT              NOT NULL,
    [DocumentsQuota]   INT              NULL,
    [DocumentsUsed]    NCHAR (10)       NOT NULL,
    [ModifiedDate]     DATETIME         NOT NULL,
    CONSTRAINT [PK_SearchInstanceCapacity] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[SearchInstanceKeys]...';


GO
CREATE TABLE [dbo].[SearchInstanceKeys] (
    [SearchInstanceKeyId] UNIQUEIDENTIFIER NOT NULL,
    [SearchInstanceId]    UNIQUEIDENTIFIER NOT NULL,
    [KeyType]             VARCHAR (50)     NOT NULL,
    [Name]                VARCHAR (100)    NOT NULL,
    [ApiKey]              VARCHAR (255)    NOT NULL,
    [CreatedDate]         DATETIME         NOT NULL,
    [ModifiedDate]        DATETIME         NULL,
    [IsLatest]            BIT              NOT NULL,
    CONSTRAINT [PK_SearchInstanceKeys] PRIMARY KEY CLUSTERED ([SearchInstanceKeyId] ASC)
);


GO
PRINT N'Creating Table [dbo].[SearchInstances]...';


GO
CREATE TABLE [dbo].[SearchInstances] (
    [SearchInstanceId] UNIQUEIDENTIFIER NOT NULL,
    [ServiceName]      VARCHAR (255)    NOT NULL,
    [SubscriptionId]   UNIQUEIDENTIFIER NOT NULL,
    [ResourceGroup]    VARCHAR (255)    NOT NULL,
    [Location]         VARCHAR (50)     NOT NULL,
    [PricingTier]      VARCHAR (50)     NOT NULL,
    [Replicas]         INT              NULL,
    [Partitions]       INT              NULL,
    [IsShared]         BIT              NOT NULL,
    [Endpoint]         VARCHAR (250)    NULL,
    CONSTRAINT [PK_SearchInstances] PRIMARY KEY CLUSTERED ([SearchInstanceId] ASC)
);


GO
PRINT N'Creating Table [dbo].[SearchInterfaces]...';


GO
CREATE TABLE [dbo].[SearchInterfaces] (
    [SearchInterfaceId] INT              IDENTITY (1, 1) NOT NULL,
    [SearchIndexId]     UNIQUEIDENTIFIER NOT NULL,
    [SearchEndpoint]    VARCHAR (50)     NULL,
    [InterfaceType]     VARCHAR (50)     NOT NULL,
    [LogoURL]           VARCHAR (255)    NULL,
    [BannerStyle]       VARCHAR (255)    NULL,
    [CreatedDate]       DATETIME         NOT NULL,
    [SupersededDate]    DATETIME         NULL,
    [IsLatest]          BIT              NOT NULL,
    CONSTRAINT [PK_SearchInterfaces] PRIMARY KEY CLUSTERED ([SearchInterfaceId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Synonyms]...';


GO
CREATE TABLE [dbo].[Synonyms] (
    [SynonymId]      UNIQUEIDENTIFIER NOT NULL,
    [SearchIndexId]  UNIQUEIDENTIFIER NOT NULL,
    [KeyWord]        VARCHAR (50)     NOT NULL,
    [SolrFormat]     VARCHAR (MAX)    NOT NULL,
    [CreatedDate]    DATETIME         NOT NULL,
    [SupersededDate] DATETIME         NULL,
    [IsLatest]       BIT              NOT NULL,
    CONSTRAINT [PK_Synonyms] PRIMARY KEY CLUSTERED ([SynonymId] ASC)
);


GO
PRINT N'Creating Table [dbo].[Themes]...';


GO
CREATE TABLE [dbo].[Themes] (
    [ThemeId]            UNIQUEIDENTIFIER NOT NULL,
    [PrimaryHexColour]   NVARCHAR (10)    NULL,
    [SecondaryHexColour] NVARCHAR (10)    NULL,
    [NavBarHexColour]    NVARCHAR (10)    NULL,
    [LogoURL]            NVARCHAR (1000)  NULL,
    [MissingImageURL]    NVARCHAR (1000)  NULL,
    [CustomerId]         UNIQUEIDENTIFIER NULL,
    [SearchIndexId]      UNIQUEIDENTIFIER NULL,
    [CreatedDate]        DATETIME         NOT NULL,
    [ModifiedDate]       DATETIME         NULL,
    CONSTRAINT [PK_Themes] PRIMARY KEY CLUSTERED ([ThemeId] ASC)
);


GO
PRINT N'Creating Default Constraint [insights].[DF_SearchInsightsData_Count]...';


GO
ALTER TABLE [insights].[SearchInsightsData]
    ADD CONSTRAINT [DF_SearchInsightsData_Count] DEFAULT ((0)) FOR [Count];


GO
PRINT N'Creating Default Constraint [insights].[DF_SearchInsightsData_Date]...';


GO
ALTER TABLE [insights].[SearchInsightsData]
    ADD CONSTRAINT [DF_SearchInsightsData_Date] DEFAULT (getutcdate()) FOR [Date];


GO
PRINT N'Creating Default Constraint [insights].[DF_SearchInsightsData_ModifiedDate]...';


GO
ALTER TABLE [insights].[SearchInsightsData]
    ADD CONSTRAINT [DF_SearchInsightsData_ModifiedDate] DEFAULT (getutcdate()) FOR [ModifiedDate];


GO
PRINT N'Creating Default Constraint [insights].[DF_SearchIndexRequestLog_Count]...';


GO
ALTER TABLE [insights].[SearchIndexRequestLog]
    ADD CONSTRAINT [DF_SearchIndexRequestLog_Count] DEFAULT ((0)) FOR [Count];


GO
PRINT N'Creating Default Constraint [insights].[DF_SearchIndexRequestLog_Date]...';


GO
ALTER TABLE [insights].[SearchIndexRequestLog]
    ADD CONSTRAINT [DF_SearchIndexRequestLog_Date] DEFAULT (getutcdate()) FOR [Date];


GO
PRINT N'Creating Default Constraint [insights].[DF_SearchIndexRequestLog_ModifiedDate]...';


GO
ALTER TABLE [insights].[SearchIndexRequestLog]
    ADD CONSTRAINT [DF_SearchIndexRequestLog_ModifiedDate] DEFAULT (getutcdate()) FOR [ModifiedDate];


GO
PRINT N'Creating Default Constraint [dbo].[DF_Customers_CreatedDate]...';


GO
ALTER TABLE [dbo].[Customers]
    ADD CONSTRAINT [DF_Customers_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [dbo].[DF_FeedCredentials_CreatedDate]...';


GO
ALTER TABLE [dbo].[FeedCredentials]
    ADD CONSTRAINT [DF_FeedCredentials_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [dbo].[DF_FeedCurrentDocuments_CreatedDate]...';


GO
ALTER TABLE [dbo].[FeedCurrentDocuments]
    ADD CONSTRAINT [DF_FeedCurrentDocuments_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [dbo].[DF_Feeds_CreatedDate]...';


GO
ALTER TABLE [dbo].[Feeds]
    ADD CONSTRAINT [DF_Feeds_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [dbo].[DF_Feeds_IsLatest]...';


GO
ALTER TABLE [dbo].[Feeds]
    ADD CONSTRAINT [DF_Feeds_IsLatest] DEFAULT ((1)) FOR [IsLatest];


GO
PRINT N'Creating Default Constraint [dbo].[DF_GenericSynonyms_CreatedDate]...';


GO
ALTER TABLE [dbo].[GenericSynonyms]
    ADD CONSTRAINT [DF_GenericSynonyms_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [dbo].[DF_GenericSynonyms_IsLatest]...';


GO
ALTER TABLE [dbo].[GenericSynonyms]
    ADD CONSTRAINT [DF_GenericSynonyms_IsLatest] DEFAULT ((1)) FOR [IsLatest];


GO
PRINT N'Creating Default Constraint [dbo].[DF_SearchIndex_CreatedDate]...';


GO
ALTER TABLE [dbo].[SearchIndex]
    ADD CONSTRAINT [DF_SearchIndex_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [dbo].[DF_SearchIndexKeys_CreatedDate]...';


GO
ALTER TABLE [dbo].[SearchIndexKeys]
    ADD CONSTRAINT [DF_SearchIndexKeys_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [dbo].[DF_SearchInstanceKeys_CreatedDate]...';


GO
ALTER TABLE [dbo].[SearchInstanceKeys]
    ADD CONSTRAINT [DF_SearchInstanceKeys_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [dbo].[DF_SearchInstanceKeys_IsLatest]...';


GO
ALTER TABLE [dbo].[SearchInstanceKeys]
    ADD CONSTRAINT [DF_SearchInstanceKeys_IsLatest] DEFAULT ((1)) FOR [IsLatest];


GO
PRINT N'Creating Default Constraint [dbo].[DF_SearchInstances_IsShared]...';


GO
ALTER TABLE [dbo].[SearchInstances]
    ADD CONSTRAINT [DF_SearchInstances_IsShared] DEFAULT ((1)) FOR [IsShared];


GO
PRINT N'Creating Default Constraint [dbo].[DF_SearchInterfaces_CreatedDate]...';


GO
ALTER TABLE [dbo].[SearchInterfaces]
    ADD CONSTRAINT [DF_SearchInterfaces_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [dbo].[DF_SearchInterfaces_IsLatest]...';


GO
ALTER TABLE [dbo].[SearchInterfaces]
    ADD CONSTRAINT [DF_SearchInterfaces_IsLatest] DEFAULT ((1)) FOR [IsLatest];


GO
PRINT N'Creating Default Constraint [dbo].[DF_Synonyms_CreatedDate]...';


GO
ALTER TABLE [dbo].[Synonyms]
    ADD CONSTRAINT [DF_Synonyms_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint [dbo].[DF_Synonyms_IsLatest]...';


GO
ALTER TABLE [dbo].[Synonyms]
    ADD CONSTRAINT [DF_Synonyms_IsLatest] DEFAULT ((1)) FOR [IsLatest];


GO
PRINT N'Creating Default Constraint [dbo].[DF_Theme_CreatedDate]...';


GO
ALTER TABLE [dbo].[Themes]
    ADD CONSTRAINT [DF_Theme_CreatedDate] DEFAULT (getutcdate()) FOR [CreatedDate];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Feeds_SearchIndex]...';


GO
ALTER TABLE [dbo].[Feeds]
    ADD CONSTRAINT [FK_Feeds_SearchIndex] FOREIGN KEY ([SearchIndexId]) REFERENCES [dbo].[SearchIndex] ([SearchIndexId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SearchIndex_Customers]...';


GO
ALTER TABLE [dbo].[SearchIndex]
    ADD CONSTRAINT [FK_SearchIndex_Customers] FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customers] ([CustomerId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SearchIndexKeys_SearchIndex]...';


GO
ALTER TABLE [dbo].[SearchIndexKeys]
    ADD CONSTRAINT [FK_SearchIndexKeys_SearchIndex] FOREIGN KEY ([SearchIndexId]) REFERENCES [dbo].[SearchIndex] ([SearchIndexId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SearchIndexKeys_SearchInstanceKeys]...';


GO
ALTER TABLE [dbo].[SearchIndexKeys]
    ADD CONSTRAINT [FK_SearchIndexKeys_SearchInstanceKeys] FOREIGN KEY ([SearchInstanceKeyId]) REFERENCES [dbo].[SearchInstanceKeys] ([SearchInstanceKeyId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SearchInstanceCapacity_SearchInstances]...';


GO
ALTER TABLE [dbo].[SearchInstanceCapacity]
    ADD CONSTRAINT [FK_SearchInstanceCapacity_SearchInstances] FOREIGN KEY ([SearchInstanceId]) REFERENCES [dbo].[SearchInstances] ([SearchInstanceId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SearchInstanceKeys_SearchInstances]...';


GO
ALTER TABLE [dbo].[SearchInstanceKeys]
    ADD CONSTRAINT [FK_SearchInstanceKeys_SearchInstances] FOREIGN KEY ([SearchInstanceId]) REFERENCES [dbo].[SearchInstances] ([SearchInstanceId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SearchInterfaces_SearchIndex]...';


GO
ALTER TABLE [dbo].[SearchInterfaces]
    ADD CONSTRAINT [FK_SearchInterfaces_SearchIndex] FOREIGN KEY ([SearchIndexId]) REFERENCES [dbo].[SearchIndex] ([SearchIndexId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Synonyms_SearchIndex]...';


GO
ALTER TABLE [dbo].[Synonyms]
    ADD CONSTRAINT [FK_Synonyms_SearchIndex] FOREIGN KEY ([SearchIndexId]) REFERENCES [dbo].[SearchIndex] ([SearchIndexId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Theme_Customers]...';


GO
ALTER TABLE [dbo].[Themes]
    ADD CONSTRAINT [FK_Theme_Customers] FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customers] ([CustomerId]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Theme_SearchIndex]...';


GO
ALTER TABLE [dbo].[Themes]
    ADD CONSTRAINT [FK_Theme_SearchIndex] FOREIGN KEY ([SearchIndexId]) REFERENCES [dbo].[SearchIndex] ([SearchIndexId]);


GO
PRINT N'Creating Procedure [Admin].[GetSearchIndexKeysForCustomer]...';


GO
CREATE PROCEDURE [Admin].[GetSearchIndexKeysForCustomer]
(
	@SearchIndexId uniqueidentifier,
	@CustomerId uniqueidentifier
)
AS

BEGIN

SELECT
srk.[Name],
srk.SearchInstanceKeyId as [ApiKey],
srk.CreatedDate
FROM dbo.SearchIndexKeys srk
INNER JOIN dbo.SearchIndex si on si.SearchIndexId = srk.SearchIndexId
WHERE srk.SearchIndexId = @SearchIndexId
AND si.CustomerId = @CustomerId

END
GO
PRINT N'Creating Procedure [Admin].[GetSearchIndexFull]...';


GO
CREATE PROCEDURE [Admin].[GetSearchIndexFull]
(
	@SearchIndexId uniqueidentifier,
	@CustomerId uniqueidentifier
)
AS

BEGIN

SELECT
[search].SearchIndexId,
[search].CustomerId,
[search].IndexName,
[search].FriendlyName,
[service].[Endpoint],
[service].PricingTier,
[search].CreatedDate,
[service].SearchInstanceId,
[service].ServiceName,
[service].SubscriptionId,
[service].ResourceGroup,
[service].[Location],
[service].PricingTier,
[service].Replicas,
[service].[Partitions],
[service].IsShared
FROM dbo.SearchIndex [search]
LEFT OUTER JOIN dbo.SearchInstances [service] on [service].SearchInstanceId = search.SearchInstanceId
WHERE search.SearchIndexId = @SearchIndexId
AND search.CustomerId = @CustomerId

--If no results it didnt match on SearchIndexId and CustomerId so override the SearchIndexId so that the other selects do not return a result
IF @@ROWCOUNT = 0
BEGIN
	SET @SearchIndexId = NULL
END

SELECT 
FeedId,
SearchIndexId,
FeedType as [Type],
FeedScheduleCron as ScheduleCron,
CreatedDate,
SupersededDate,
IsLatest
FROM dbo.Feeds 
where SearchIndexId = @SearchIndexId 
and IsLatest = 1


SELECT 
NotificationRuleId,
TransmitType,
Recipients,
[Trigger]
FROM dbo.NotificationRules 
where SearchIndexId = @SearchIndexId 
and IsLatest = 1

SELECT 
SynonymId,
KeyWord as [Key],
SolrFormat
FROM dbo.[Synonyms]
where SearchIndexId = @SearchIndexId 
and IsLatest = 1

SELECT 
SearchInterfaceId,
InterfaceType as [Type],
LogoURL,
BannerStyle
FROM dbo.SearchInterfaces 
where SearchIndexId = @SearchIndexId 
and IsLatest = 1

END
GO
PRINT N'Creating Procedure [Admin].[GetSearchIndexByFriendlyName]...';


GO
CREATE PROCEDURE [Admin].[GetSearchIndexByFriendlyName]
(
	@CustomerId uniqueidentifier,
	@FriendlyName varchar(100)
)
AS

BEGIN

SELECT
si.SearchIndexId,
si.SearchInstanceId,
si.CustomerId,
si.FriendlyName,
si.IndexName
FROM dbo.SearchIndex si
WHERE si.CustomerId = @CustomerId 
AND si.FriendlyName = @FriendlyName

END
GO
PRINT N'Creating Procedure [Admin].[GetSearchIndex]...';


GO
CREATE PROCEDURE [Admin].[GetSearchIndex]
(
	@SearchIndexId uniqueidentifier,
	@CustomerId uniqueidentifier
)
AS

BEGIN

SELECT
[search].SearchIndexId,
[search].CustomerId,
[search].IndexName,
[search].FriendlyName,
[service].[Endpoint],
[service].PricingTier,
[search].CreatedDate,
[service].SearchInstanceId,
[service].ServiceName,
[service].SubscriptionId,
[service].ResourceGroup,
[service].[Location],
[service].PricingTier,
[service].Replicas,
[service].[Partitions],
[service].IsShared
FROM dbo.SearchIndex [search]
LEFT OUTER JOIN dbo.SearchInstances [service] on [service].SearchInstanceId = search.SearchInstanceId
WHERE search.SearchIndexId = @SearchIndexId
and search.CustomerId = @CustomerId

END
GO
PRINT N'Creating Procedure [Admin].[GetLatestSearchInterface]...';


GO
CREATE PROCEDURE [Admin].[GetLatestSearchInterface]
(
	@SearchIndexId uniqueidentifier
)
AS

BEGIN

SELECT TOP 1
si.SearchInterfaceId,
si.SearchEndpoint,
si.InterfaceType as [Type],
si.LogoURL,
si.BannerStyle,
si.CreatedDate
FROM [dbo].[SearchInterfaces] si
WHERE si.SearchIndexId = @SearchIndexId
AND si.IsLatest = 1

END
GO
PRINT N'Creating Procedure [Admin].[GetLatestFeed]...';


GO
CREATE PROCEDURE [Admin].[GetLatestFeed]
(
	@SearchIndexId uniqueidentifier
)
AS

BEGIN

SELECT TOP 1
f.FeedId,
f.SearchIndexId,
f.FeedType as [Type],
f.FeedScheduleCron as ScheduleCron,
f.CreatedDate,
f.SupersededDate,
f.IsLatest
FROM dbo.Feeds f
WHERE f.SearchIndexId = @SearchIndexId
AND f.IsLatest = 1

END
GO
PRINT N'Creating Procedure [Admin].[GetFeedCredentialsUsername]...';


GO

CREATE PROCEDURE [Admin].[GetFeedCredentialsUsername]
(
	@SearchIndexId uniqueidentifier
)
AS

BEGIN

SELECT TOP 1
fc.SearchIndexId,
fc.Username,
fc.CreatedDate,
fc.ModifiedDate
FROM dbo.FeedCredentials fc
WHERE fc.SearchIndexId = @SearchIndexId

END
GO
PRINT N'Creating Procedure [Admin].[GetCustomerFull]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Admin].[GetCustomerFull]
	-- Add the parameters for the stored procedure here
	@CustomerId uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT c.[CustomerId]
		  ,c.[BusinessName]
	  FROM [dbo].[Customers] c 
	  WHERE c.CustomerId = @CustomerId

	  SELECT [SearchIndexId]
      ,[CustomerId]
      ,[SearchInstanceId]
      ,[IndexName]
      ,[FriendlyName]
      ,[CreatedDate]
	  FROM [dbo].[SearchIndex] s
	  WHERE s.CustomerId = @CustomerId

END
GO
PRINT N'Creating Procedure [Admin].[GetCustomerByID]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Admin].[GetCustomerByID]
	-- Add the parameters for the stored procedure here
	@CustomerId uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT 
	c.[CustomerId]
	,c.[BusinessName]
	FROM [dbo].[Customers] c 
	WHERE c.CustomerId = @CustomerId
END
GO
PRINT N'Creating Procedure [Admin].[AddSynonym]...';


GO
CREATE PROCEDURE [Admin].[AddSynonym]
(
	@SynonymId uniqueidentifier,
	@SearchIndexId uniqueidentifier,
	@KeyWord varchar(50),
	@SolrFormat varchar(max)
)
AS

BEGIN

	INSERT INTO [dbo].[Synonyms]
	(
		SynonymId,
		SearchIndexId,
		KeyWord,
		SolrFormat
	)
	VALUES
	(
		@SynonymId,
		@SearchIndexId,
		@KeyWord,
		@SolrFormat
	)

	SELECT @SynonymId as SynonymId

END
GO
PRINT N'Creating Procedure [Admin].[AddSearchIndex]...';


GO
CREATE PROCEDURE [Admin].[AddSearchIndex]
(
	@SearchIndexId uniqueidentifier,
	@SearchInstanceId uniqueidentifier = NULL,
	@CustomerId	uniqueidentifier,
	@IndexName varchar(60),
	@FriendlyName varchar(100)
)
AS

BEGIN
	
	INSERT INTO dbo.SearchIndex
	(
		[SearchIndexId],
		[SearchInstanceId],
		[CustomerId],
		[IndexName],
		[FriendlyName],
		[CreatedDate]
	)
	VALUES
	(
		@SearchIndexId,
		@SearchInstanceId,
		@CustomerId,
		@IndexName,
		@FriendlyName,
		GETUTCDATE()
	)

END
GO
PRINT N'Creating Procedure [Admin].[GetSearchInsightsSearchCountByDateRange]...';


GO
CREATE PROCEDURE [Admin].[GetSearchInsightsSearchCountByDateRange]
(
	@SearchIndexId uniqueidentifier,
	@DateFrom datetime,
	@DateTo datetime
)
AS

BEGIN

select 
d.[Date],
d.[Count]
from insights.SearchIndexRequestLog d
where d.SearchIndexId = @SearchIndexId
and d.[Date] between @DateFrom and @DateTo

END
GO
PRINT N'Creating Procedure [Admin].[UpdateTheme]...';


GO

CREATE PROCEDURE [Admin].[UpdateTheme]
	@ThemeId uniqueidentifier,
	@PrimaryHexColour nvarchar(10),
	@SecondaryHexColour nvarchar(10),
	@NavBarHexColour nvarchar(10),
	@LogoURL nvarchar(1000),
	@MissingImageURL nvarchar(1000)
AS
BEGIN

	UPDATE [dbo].[Themes]
	SET PrimaryHexColour = @PrimaryHexColour,
		SecondaryHexColour = @SecondaryHexColour,
		NavBarHexColour = @NavBarHexColour,
		LogoURL = @LogoURL,
		MissingImageURL = @MissingImageURL,
		ModifiedDate = GETUTCDATE()
	WHERE [ThemeId] = @ThemeId

END
GO
PRINT N'Creating Procedure [Admin].[UpdateSynonym]...';


GO
CREATE PROCEDURE [Admin].[UpdateSynonym]
(
	@SearchIndexId uniqueidentifier,
	@SynonymId uniqueidentifier,
	@KeyWord varchar(50),
	@SolrFormat varchar(max)
)
AS

BEGIN

	UPDATE [dbo].[Synonyms]
	SET	[KeyWord] = @KeyWord,
	[SolrFormat] = @SolrFormat
	WHERE SearchIndexId = @SearchIndexId
	AND SynonymId = @SynonymId
	AND IsLatest = 1
	
END
GO
PRINT N'Creating Procedure [Admin].[SupersedeSynonym]...';


GO
CREATE PROCEDURE [Admin].[SupersedeSynonym]
(
	@SearchIndexId uniqueidentifier,
	@SynonymId uniqueidentifier
)
AS

BEGIN

	UPDATE [dbo].[Synonyms]
	SET IsLatest = 0,
		SupersededDate = GETUTCDATE()
	WHERE SearchIndexId = @SearchIndexId
	AND SynonymId = @SynonymId
	AND IsLatest = 1
	
END
GO
PRINT N'Creating Procedure [Admin].[SupersedeNotificationRule]...';


GO
CREATE PROCEDURE [Admin].[SupersedeNotificationRule]
(
	@SearchIndexId uniqueidentifier,
	@NotificationRuleId int
)
AS

BEGIN

	UPDATE dbo.NotificationRules
	SET IsLatest = 0,
		SupersededDate = GETUTCDATE()
	WHERE SearchIndexId = @SearchIndexId
	AND NotificationRuleId = @NotificationRuleId
	AND IsLatest = 1
	
END
GO
PRINT N'Creating Procedure [Admin].[SupersedeLatestSearchInterface]...';


GO
CREATE PROCEDURE [Admin].[SupersedeLatestSearchInterface]
(
	@SearchIndexId uniqueidentifier
)
AS

BEGIN

	UPDATE dbo.SearchInterfaces
	SET IsLatest = 0,
		SupersededDate = GETUTCDATE()
	WHERE SearchIndexId = @SearchIndexId
	AND IsLatest = 1
	
END
GO
PRINT N'Creating Procedure [Admin].[SupersedeLatestFeed]...';


GO
CREATE PROCEDURE [Admin].[SupersedeLatestFeed]
(
	@SearchIndexId uniqueidentifier
)
AS

BEGIN

	UPDATE dbo.Feeds
	SET IsLatest = 0,
		SupersededDate = GETUTCDATE()
	WHERE SearchIndexId = @SearchIndexId
	AND IsLatest = 1
	
END
GO
PRINT N'Creating Procedure [Admin].[GetThemeBySearchIndexId]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Admin].[GetThemeBySearchIndexId]
	-- Add the parameters for the stored procedure here
	@SearchIndexId uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [ThemeId]
      ,[PrimaryHexColour]
      ,[SecondaryHexColour]
      ,[NavBarHexColour]
      ,[LogoURL]
	  ,[MissingImageURL]
      ,[CustomerId]
      ,[SearchIndexId]
      ,[CreatedDate]
      ,[ModifiedDate]
	FROM [dbo].[Themes]
	where [SearchIndexId] = @SearchIndexId

END
GO
PRINT N'Creating Procedure [Admin].[GetThemeById]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Admin].[GetThemeById]
	-- Add the parameters for the stored procedure here
	@ThemeId uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [ThemeId]
      ,[PrimaryHexColour]
      ,[SecondaryHexColour]
      ,[NavBarHexColour]
      ,[LogoURL]
	  ,[MissingImageURL]
      ,[CustomerId]
      ,[SearchIndexId]
      ,[CreatedDate]
      ,[ModifiedDate]
	FROM [dbo].[Themes]
	where [ThemeId] = @ThemeId

END
GO
PRINT N'Creating Procedure [Admin].[GetThemeByCustomerId]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [Admin].[GetThemeByCustomerId]
	-- Add the parameters for the stored procedure here
	@CustomerId uniqueidentifier
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [ThemeId]
      ,[PrimaryHexColour]
      ,[SecondaryHexColour]
      ,[NavBarHexColour]
      ,[LogoURL]
	  ,[MissingImageURL]
      ,[CustomerId]
      ,[SearchIndexId]
      ,[CreatedDate]
      ,[ModifiedDate]
	FROM [dbo].[Themes]
	where [CustomerId] = @CustomerId

END
GO
PRINT N'Creating Procedure [Admin].[GetSynonyms]...';


GO
CREATE PROCEDURE [Admin].[GetSynonyms]
(
	@SearchIndexId uniqueidentifier
)
AS

BEGIN

SELECT
SynonymId,
SearchIndexId,
KeyWord as [Key],
SolrFormat,
CreatedDate
FROM [dbo].[Synonyms]
WHERE SearchIndexId = @SearchIndexId
AND IsLatest = 1

END
GO
PRINT N'Creating Procedure [Admin].[GetSynonymByKeyWord]...';


GO
CREATE PROCEDURE [Admin].[GetSynonymByKeyWord]
(
	@SearchIndexId uniqueidentifier,
	@KeyWord varchar(30)
)
AS

BEGIN

SELECT
SynonymId,
SearchIndexId,
KeyWord as [Key],
SolrFormat,
CreatedDate
FROM [dbo].[Synonyms]
WHERE SearchIndexId = @SearchIndexId
AND KeyWord = @KeyWord
AND IsLatest = 1

END
GO
PRINT N'Creating Procedure [Admin].[GetSynonymById]...';


GO
CREATE PROCEDURE [Admin].[GetSynonymById]
(
	@SearchIndexId uniqueidentifier,
	@SynonymId uniqueidentifier
)
AS

BEGIN

SELECT
SynonymId,
SearchIndexId,
KeyWord as [Key],
SolrFormat,
CreatedDate
FROM [dbo].[Synonyms]
WHERE SearchIndexId = @SearchIndexId
AND SynonymId = @SynonymId
AND IsLatest = 1

END
GO
PRINT N'Creating Procedure [Admin].[GetSearchInsightsByDataCategories]...';


GO
CREATE PROCEDURE [Admin].[GetSearchInsightsByDataCategories]
(
	@SearchIndexId uniqueidentifier,
	@DateFrom datetime,
	@DateTo datetime,
	@DataCategories varchar(1000)
)
AS

BEGIN

select 
d.[DataCategory],
d.[DataPoint],
d.[Date],
d.[Count]
from insights.SearchInsightsData d
cross apply string_split(@DataCategories, ',') categories
where d.SearchIndexId = @SearchIndexId
and d.[Date] >= @DateFrom
and d.[Date] <= @DateTo
and categories.value = d.DataCategory

END
GO
PRINT N'Creating Procedure [Admin].[GetSearchIndexQueryCredentialsByCustomerEndpoint]...';


GO
CREATE PROCEDURE [Admin].[GetSearchIndexQueryCredentialsByCustomerEndpoint]
(
	@CustomerEndpoint varchar(250)
)
AS

BEGIN

SELECT
si.SearchIndexId,
LOWER(si.IndexName) as [SearchIndexName],
i.ServiceName as [SearchInstanceName],
i.[Endpoint] as SearchInstanceEndpoint,
ik.ApiKey
FROM dbo.SearchIndex si
INNER JOIN dbo.SearchInterfaces sui on sui.SearchIndexId = si.SearchIndexId AND sui.IsLatest = 1
INNER JOIN dbo.SearchInstances i on i.SearchInstanceId = si.SearchInstanceId
INNER JOIN dbo.SearchInstanceKeys ik on ik.SearchInstanceId = i.SearchInstanceId 
									AND ik.KeyType = 'Query' 
									AND ik.Name = 'Query key' 
									AND ik.IsLatest = 1
WHERE sui.SearchEndpoint = @CustomerEndpoint

END
GO
PRINT N'Creating Procedure [Configuration].[GetThemeByCustomerEndpoint]...';


GO
CREATE PROCEDURE [Configuration].[GetThemeByCustomerEndpoint]
(
	@CustomerEndpoint varchar(250)
)
AS

BEGIN

SELECT
t.ThemeId,
t.PrimaryHexColour,
t.SecondaryHexColour,
t.NavBarHexColour,
t.LogoURL,
t.MissingImageURL
FROM dbo.Themes t
INNER JOIN dbo.SearchInterfaces sui on sui.SearchIndexId = t.SearchIndexId AND sui.IsLatest = 1
WHERE sui.SearchEndpoint = @CustomerEndpoint

END
GO
PRINT N'Creating Procedure [Configuration].[GetSearchIndexQueryCredentialsByCustomerEndpoint]...';


GO
CREATE PROCEDURE [Configuration].[GetSearchIndexQueryCredentialsByCustomerEndpoint]
(
	@CustomerEndpoint varchar(250)
)
AS

BEGIN

SELECT
si.SearchIndexId,
LOWER(si.IndexName) as [SearchIndexName],
i.ServiceName as [SearchInstanceName],
i.[Endpoint] as [SearchInstanceEndpoint],
ik.ApiKey as [QueryApiKey]
FROM dbo.SearchIndex si
INNER JOIN dbo.SearchInterfaces sui on sui.SearchIndexId = si.SearchIndexId AND sui.IsLatest = 1
INNER JOIN dbo.SearchInstances i on i.SearchInstanceId = si.SearchInstanceId
INNER JOIN dbo.SearchInstanceKeys ik on ik.SearchInstanceId = i.SearchInstanceId 
									AND ik.KeyType = 'Query' 
									AND ik.Name = 'Query key' 
									AND ik.IsLatest = 1
WHERE sui.SearchEndpoint = @CustomerEndpoint

END
GO
PRINT N'Creating Procedure [Configuration].[GetGenericSynonymsByCategory]...';


GO
CREATE PROCEDURE [Configuration].[GetGenericSynonymsByCategory]
(
@Category varchar(50)
)
AS

BEGIN

SELECT
Id,
Category,
SolrFormat,
CreatedDate
FROM [dbo].[GenericSynonyms]
WHERE Category = @Category
AND IsLatest = 1

END
GO
PRINT N'Creating Procedure [FeedServicesFunc].[GetSearchIndexFeedProcessingData]...';


GO
CREATE PROCEDURE [FeedServicesFunc].[GetSearchIndexFeedProcessingData]
(
	@CustomerId uniqueidentifier,
	@SearchIndexName varchar(60)
)
AS

BEGIN

SELECT
si.SearchIndexId,
LOWER(si.IndexName) as [SearchIndexName],
i.SearchInstanceId,
i.ServiceName as [SearchInstanceName],
i.[Endpoint],
ik.ApiKey
FROM dbo.SearchIndex si
INNER JOIN dbo.SearchInstances i on i.SearchInstanceId = si.SearchInstanceId
INNER JOIN dbo.SearchInstanceKeys ik on ik.SearchInstanceId = i.SearchInstanceId 
									AND ik.KeyType = 'Admin' 
									AND ik.Name = 'Primary Admin key' 
									AND ik.IsLatest = 1
WHERE si.CustomerId = @CustomerId
AND si.IndexName = @SearchIndexName

SELECT TOP 1
f.DataFormat as FeedDataFormat,
s.SearchEndpoint
FROM dbo.SearchIndex si
INNER JOIN dbo.Feeds f on f.SearchIndexId = si.SearchIndexId AND f.IsLatest = 1
INNER JOIN dbo.SearchInterfaces s on s.SearchIndexId = si.SearchIndexId AND s.IsLatest = 1
WHERE si.CustomerId = @CustomerId
AND si.IndexName = @SearchIndexName

END
GO
PRINT N'Creating Procedure [FeedServicesFunc].[MergeFeedDocuments]...';


GO
CREATE PROCEDURE [FeedServicesFunc].[MergeFeedDocuments]
(
	@SearchIndexId uniqueidentifier,
	@NewFeedDocuments [NewFeedDocuments] READONLY
)
AS

BEGIN
	DECLARE @UtcNow datetime = GETUTCDATE();

	MERGE [dbo].[FeedCurrentDocuments] WITH (SERIALIZABLE) as target
	USING @NewFeedDocuments as source
	ON @searchIndexId = target.SearchIndexId
	AND source.DocumentId = target.DocumentId
	WHEN MATCHED THEN
	UPDATE SET target.[CreatedDate] = @UtcNow
	WHEN NOT MATCHED BY target THEN
	INSERT ([DocumentId], [SearchIndexId])
	VALUES (source.[DocumentId], @SearchIndexId)
	WHEN NOT MATCHED BY source AND target.SearchIndexId = @SearchIndexId THEN
	DELETE;

END
GO
PRINT N'Creating Procedure [FeedServicesFunc].[GetSearchIndexCredentials]...';


GO
CREATE PROCEDURE [FeedServicesFunc].[GetSearchIndexCredentials]
(
	@CustomerId uniqueidentifier,
	@SearchIndexName varchar(60)
)
AS

BEGIN

SELECT
si.SearchIndexId,
LOWER(si.IndexName) as [SearchIndexName],
i.SearchInstanceId,
i.ServiceName as [SearchInstanceName],
i.[Endpoint],
ik.ApiKey
FROM dbo.SearchIndex si
INNER JOIN dbo.SearchInstances i on i.SearchInstanceId = si.SearchInstanceId
INNER JOIN dbo.SearchInstanceKeys ik on ik.SearchInstanceId = i.SearchInstanceId 
									AND ik.KeyType = 'Admin' 
									AND ik.Name = 'Primary Admin key' 
									AND ik.IsLatest = 1
WHERE si.CustomerId = @CustomerId
AND si.IndexName = @SearchIndexName

END
GO
PRINT N'Creating Procedure [FeedServicesFunc].[GetLatestGenericSynonymsByCategory]...';


GO
CREATE PROCEDURE [FeedServicesFunc].[GetLatestGenericSynonymsByCategory]
(
	@Category varchar(50)
)
AS

BEGIN

SELECT
Id,
Category,
SolrFormat,
CreatedDate
FROM [dbo].[GenericSynonyms]
WHERE Category = @Category
AND IsLatest = 1

END
GO
PRINT N'Creating Procedure [FeedServicesFunc].[GetFeedDataFormat]...';


GO
CREATE PROCEDURE [FeedServicesFunc].[GetFeedDataFormat]
(
	@CustomerId uniqueidentifier,
	@SearchIndexName varchar(60)
)
AS

BEGIN

SELECT TOP 1
f.DataFormat
FROM dbo.SearchIndex si
INNER JOIN dbo.Feeds f on f.SearchIndexId = si.SearchIndexId AND f.IsLatest = 1
WHERE si.CustomerId = @CustomerId
AND si.IndexName = @SearchIndexName

END
GO
PRINT N'Creating Procedure [FeedServicesFunc].[GetCurrentFeedDocumentsTotal]...';


GO
CREATE PROCEDURE [FeedServicesFunc].[GetCurrentFeedDocumentsTotal]
(
	@SearchIndexId uniqueidentifier
)
AS

BEGIN

	SELECT 
	COUNT(1) AS TotalDocuments
	FROM [dbo].[FeedCurrentDocuments] 
	WHERE SearchIndexId = @SearchIndexId

END
GO
PRINT N'Creating Procedure [FeedServicesFunc].[GetCurrentFeedDocuments]...';


GO
CREATE PROCEDURE [FeedServicesFunc].[GetCurrentFeedDocuments]
(
	@SearchIndexId uniqueidentifier,
	@PageNumber int,
	@PageSize int
)
AS

BEGIN

	SELECT
	[DocumentId]
	FROM [dbo].[FeedCurrentDocuments]
	WHERE SearchIndexId = @SearchIndexId
	ORDER BY CreatedDate ASC
	OFFSET (@PageNumber - 1) * @PageSize ROWS
	FETCH NEXT @PageSize ROWS ONLY;

END
GO
PRINT N'Creating Procedure [SearchInsightsFunc].[AddSearchRequest]...';


GO
CREATE PROCEDURE [SearchInsightsFunc].[AddSearchRequest]
(
	@SearchIndexId uniqueidentifier,
	@Date date
)
AS

BEGIN
	DECLARE @UtcNow datetime = GETUTCDATE();

	MERGE [insights].[SearchIndexRequestLog] WITH (SERIALIZABLE) as target
	USING (	SELECT @SearchIndexId as [SearchIndexId], @Date as [Date]) as source
	ON source.[SearchIndexId] = target.[SearchIndexId]
	AND source.[Date] = target.[Date]
	WHEN MATCHED THEN
	UPDATE SET	target.[Count] = target.[Count] + 1, 
				target.[ModifiedDate] = @UtcNow
	WHEN NOT MATCHED THEN
	INSERT ([SearchIndexId], [Count], [Date], [ModifiedDate])
	VALUES (@SearchIndexId, 1, @Date, @UtcNow);

END
GO
PRINT N'Creating Procedure [SearchInsightsFunc].[AddDataPoints]...';


GO
CREATE PROCEDURE [SearchInsightsFunc].[AddDataPoints]
(
	@SearchIndexId uniqueidentifier,
	@SearchInsightsData [SearchInsightsData] READONLY
)
AS

BEGIN
	DECLARE @UtcNow datetime = GETUTCDATE();

	MERGE [insights].[SearchInsightsData] WITH (SERIALIZABLE) as target
	USING @SearchInsightsData as source
	ON @searchIndexId = target.SearchIndexId
	AND source.[DataCategory] = target.[DataCategory]
	AND source.[DataPoint] = target.[DataPoint]
	AND source.[Date] = target.[Date]
	WHEN MATCHED THEN
	UPDATE SET target.[Count] = target.[Count] + 1,
				target.[ModifiedDate] = @UtcNow
	WHEN NOT MATCHED THEN
	INSERT ([SearchIndexId], [DataCategory], [DataPoint], [Count], [Date], [ModifiedDate])
	VALUES (@SearchIndexId, source.[DataCategory], source.[DataPoint], 1, source.[Date], @UtcNow);

END
GO
PRINT N'Creating Procedure [SFTPGoServicesFunc].[UpdateFeedCredentials]...';


GO

CREATE PROCEDURE [SFTPGoServicesFunc].[UpdateFeedCredentials]
(
	@SearchIndexId uniqueidentifier,
	@Username varchar(50),
	@PasswordHash varchar(250)
)
AS

BEGIN
	
	UPDATE dbo.FeedCredentials
	SET	PasswordHash = @PasswordHash,
		ModifiedDate = GETUTCDATE()
	WHERE SearchIndexId = @SearchIndexId
	AND Username = @Username

END
GO
PRINT N'Creating Procedure [SFTPGoServicesFunc].[GetFeedCredentials]...';


GO

CREATE PROCEDURE [SFTPGoServicesFunc].[GetFeedCredentials]
(
	@SearchIndexId uniqueidentifier,
	@Username varchar(50)
)
AS

BEGIN
	
	SELECT
	SearchIndexId,
	Username,
	CreatedDate
	FROM [dbo].[FeedCredentials]
	WHERE SearchIndexId = @SearchIndexId
	AND Username = @Username

END
GO
PRINT N'Creating Procedure [SFTPGoServicesFunc].[DeleteFeedCredentials]...';


GO

CREATE PROCEDURE [SFTPGoServicesFunc].[DeleteFeedCredentials]
(
	@SearchIndexId uniqueidentifier,
	@Username varchar(50)
)
AS

BEGIN
	
	DELETE FROM dbo.FeedCredentials
	WHERE SearchIndexId = @SearchIndexId
	AND Username = @Username

END
GO
PRINT N'Creating Procedure [SFTPGoServicesFunc].[AddFeedCredentials]...';


GO

CREATE PROCEDURE [SFTPGoServicesFunc].[AddFeedCredentials]
(
	@SearchIndexId uniqueidentifier,
	@Username varchar(50),
	@PasswordHash varchar(250)
)
AS

BEGIN
	
	INSERT INTO dbo.FeedCredentials
	(
		Id,
		SearchIndexId,
		Username,
		PasswordHash,
		CreatedDate
	)
	VALUES
	(
		NEWID(),
		@SearchIndexId,
		@Username,
		@PasswordHash,
		GETUTCDATE()
	)

END
GO
PRINT N'Creating Procedure [Admin].[AddSearchInterface]...';


GO
CREATE PROCEDURE [Admin].[AddSearchInterface]
(
	@SearchIndexId uniqueidentifier,
	@InterfaceType varchar(50),
	@LogoURL varchar(255),
	@BannerStyle varchar(255)
)
AS

BEGIN

	EXEC [Admin].[SupersedeLatestSearchInterface] @SearchIndexId = @SearchIndexId
	
	INSERT INTO dbo.SearchInterfaces
	(
		SearchIndexId,
		InterfaceType,
		LogoURL,
		BannerStyle
	)
	VALUES
	(
		@SearchIndexId,
		@InterfaceType,
		@LogoURL,
		@BannerStyle
	)

END
GO
PRINT N'Creating Procedure [Admin].[AddFeed]...';


GO
CREATE PROCEDURE [Admin].[AddFeed]
(
	@SearchIndexId uniqueidentifier,
	@FeedType varchar(20),
	@FeedCron varchar(255)
)
AS

BEGIN

	EXEC [Admin].[SupersedeLatestFeed] @SearchIndexId = @SearchIndexId
	
	INSERT INTO dbo.Feeds
	(
		SearchIndexId,
		FeedType,
		FeedScheduleCron
	)
	VALUES
	(
		@SearchIndexId,
		@FeedType,
		@FeedCron
	)

END
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
