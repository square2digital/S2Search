/*
Deployment script for S2_Search

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

-- =============================
-- Drop Table Definitions
-- =============================

DROP TABLE IF EXISTS customers;
DROP TABLE IF EXISTS feed_credentials;
DROP TABLE IF EXISTS feed_current_documents;
DROP TABLE IF EXISTS feeds;
DROP TABLE IF EXISTS search_configuration;
DROP TABLE IF EXISTS search_index;
DROP TABLE IF EXISTS search_insights_data;
DROP TABLE IF EXISTS search_instance_keys;
DROP TABLE IF EXISTS search_instances;
DROP TABLE IF EXISTS synonyms;
DROP TABLE IF EXISTS themes;

DROP TABLE IF EXISTS search_insights_data;
DROP TABLE IF EXISTS search_index_request_log;

-- =============================
-- Table Definitions
-- =============================

CREATE TABLE customers (
    id                  UUID           NOT NULL,
    business_name       TEXT           NULL,
    customer_endpoint   TEXT           NULL,
    created_date        TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_date       TIMESTAMP      NULL,
    constraint PK_Users PRIMARY KEY (Id)
);

CREATE TABLE feed_credentials (
    id                 UUID          NOT NULL,
    search_index_id    UUID          NOT NULL,
    username           TEXT          NOT NULL,
    password_hash      TEXT          NOT NULL,
    created_date       TIMESTAMP     NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_date      TIMESTAMP     NULL
);

CREATE TABLE feed_current_documents (
    id               TEXT           NOT NULL,
    search_index_id    UUID           NOT NULL,
    created_date      TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE feeds (
    id               UUID           NOT NULL,
    feed_type         TEXT           NOT NULL,
    feed_schedule_cron TEXT           NOT NULL,
    search_index_id    UUID           NOT NULL,
    data_format       TEXT           NOT NULL,
    created_date      TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
    superseded_date   TIMESTAMP      NULL,
    is_latest         BOOLEAN        NOT NULL DEFAULT TRUE,
    constraint PK_Feeds PRIMARY KEY (Id)
);

CREATE TABLE search_configuration (
    id               UUID           NOT NULL,
    value            TEXT           NOT NULL,
    search_index_id    UUID           NOT NULL,
    key              TEXT           NOT NULL,
    friendly_name     TEXT           NOT NULL,
    description      TEXT           NOT NULL,
    data_type         TEXT           NOT NULL,
    order_index       INT            NULL,
    created_date      TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_date     TIMESTAMP      NULL,
    constraint PK_SearchConfigurationMappingsCombined PRIMARY KEY (Id)
);

CREATE TABLE search_index (
    id               UUID           NOT NULL,
    customer_id       UUID           NOT NULL,
    search_instance_id UUID           NULL,
    index_name        TEXT           NOT NULL,
    friendly_name     TEXT           NOT NULL,
    pricing_sku_id     TEXT           NOT NULL,
    created_date      TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
    constraint PK_SearchIndex PRIMARY KEY (Id)
);

CREATE TABLE search_instance_keys (
    id               UUID           NOT NULL,
    search_instance_id UUID           NOT NULL,
    key_type          TEXT           NOT NULL,
    name             TEXT           NOT NULL,
    api_key           TEXT           NOT NULL,
    created_date      TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_date     TIMESTAMP      NULL,
    is_latest         BOOLEAN        NOT NULL DEFAULT TRUE,
    constraint PK_SearchInstanceKeys PRIMARY KEY (Id)
);

CREATE TABLE search_instances (
    id                UUID           NOT NULL,
    customer_id       UUID           NOT NULL,
    service_name      TEXT           NOT NULL,
    location          TEXT           NOT NULL,
    pricing_tier      TEXT           NOT NULL,
    replicas          INT            NULL,
    partitions        INT            NULL,
    is_shared         BOOLEAN        NOT NULL,
    type              TEXT           NOT NULL,
    root_endpoint     TEXT           NULL,
    constraint PK_SearchInstances PRIMARY KEY (Id)
);

CREATE TABLE synonyms (
    id                 UUID           NOT NULL,
    category           TEXT           NULL,
    search_index_id    UUID           NULL,
    key_word           TEXT           NULL,
    solr_format        TEXT           NOT NULL,
    created_date       TIMESTAMP      NOT NULL,
    superseded_date    TIMESTAMP      NULL,
    is_latest          BOOLEAN        NOT NULL,
    constraint PK_CombinedSynonyms PRIMARY KEY (Id)
);

CREATE TABLE themes (
    id                   UUID         NOT NULL,
    primary_hex_colour   TEXT         NULL,
    secondary_hex_colour TEXT         NULL,
    nav_bar_hex_colour   TEXT         NULL,
    logo_url             TEXT         NULL,
    missing_image_url    TEXT         NULL,
    customer_id          UUID         NULL,
    search_index_id      UUID         NULL,
    created_date         TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_date        TIMESTAMP    NULL,
    constraint PK_Themes PRIMARY KEY (Id)
);

CREATE TABLE search_insights_data (
    id               UUID           NOT NULL,
    search_index_id    UUID           NOT NULL,
    data_catery       TEXT           NOT NULL,
    data_point        TEXT           NOT NULL,
    count            INT            NOT NULL DEFAULT 0,
    date             TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_date      TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_date     TIMESTAMP      NOT NULL,
    constraint PK_SearchInsightsData PRIMARY KEY (Id)
);

CREATE TABLE search_index_request_log (
    id               UUID           NOT NULL,
    search_index_id    UUID           NOT NULL,
    count            INT            NOT NULL DEFAULT 0,
    date             TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_date      TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_date     TIMESTAMP      NOT NULL,
    constraint PK_SearchIndexRequestLog PRIMARY KEY (Id)
);

-- =============================
-- Drop Function Definitions
-- =============================

DROP FUNCTION IF EXISTS add_search_index(uuid, uuid, uuid, TEXT, TEXT);
DROP FUNCTION IF EXISTS add_synonym(uuid, uuid, TEXT, TEXT);
DROP FUNCTION IF EXISTS get_customer_by_id(uuid);
DROP FUNCTION IF EXISTS get_customer_full(uuid);
DROP FUNCTION IF EXISTS get_latest_feed(uuid);
DROP FUNCTION IF EXISTS get_search_index(uuid, uuid);
DROP FUNCTION IF EXISTS get_search_index_by_friendly_name(uuid, TEXT);
DROP FUNCTION IF EXISTS get_search_index_full(uuid, uuid);
DROP FUNCTION IF EXISTS get_search_index_query_credentials_by_customer_endpoint(TEXT);
DROP FUNCTION IF EXISTS get_search_insights_by_data_cateries(uuid, TIMESTAMP, TIMESTAMP, TEXT);
DROP FUNCTION IF EXISTS get_search_insights_search_count_by_date_range(uuid, TIMESTAMP, TIMESTAMP);
DROP FUNCTION IF EXISTS get_synonym_by_id(uuid, uuid);
DROP FUNCTION IF EXISTS get_synonym_by_key_word(uuid, TEXT);
DROP FUNCTION IF EXISTS get_synonyms(uuid);
DROP FUNCTION IF EXISTS get_theme_by_customer_id(uuid);
DROP FUNCTION IF EXISTS get_theme_by_id(uuid);
DROP FUNCTION IF EXISTS get_theme_by_search_index_id(uuid);
DROP FUNCTION IF EXISTS supersede_latest_feed(uuid);
DROP FUNCTION IF EXISTS supersede_synonym(uuid, uuid);
DROP FUNCTION IF EXISTS update_synonym(uuid, uuid, TEXT, TEXT);
DROP FUNCTION IF EXISTS update_theme(uuid, TEXT, TEXT, TEXT, TEXT, TEXT);
DROP FUNCTION IF EXISTS get_search_index_query_credentials_by_customer_endpoint(TEXT);
DROP FUNCTION IF EXISTS get_current_feed_documents(uuid, INT, INT);
DROP FUNCTION IF EXISTS get_current_feed_documents_total(uuid);
DROP FUNCTION IF EXISTS get_feed_credentials_username(uuid);
DROP FUNCTION IF EXISTS get_feed_data_format(uuid, TEXT);
DROP FUNCTION IF EXISTS get_latest_generic_synonyms_by_catery(TEXT);
DROP FUNCTION IF EXISTS get_search_index_credentials(uuid, TEXT);
DROP FUNCTION IF EXISTS get_search_index_feed_processing_data(uuid, TEXT);
DROP FUNCTION IF EXISTS merge_feed_documents(uuid, new_feed_documents);
DROP FUNCTION IF EXISTS add_data_points(uuid, search_insights_data);
DROP FUNCTION IF EXISTS add_search_request(uuid, DATE);
DROP FUNCTION IF EXISTS add_feed_credentials(uuid, TEXT, TEXT);
DROP FUNCTION IF EXISTS delete_feed_credentials(uuid, TEXT);
DROP FUNCTION IF EXISTS get_feed_credentials(uuid, TEXT);
DROP FUNCTION IF EXISTS update_feed_credentials(uuid, TEXT, TEXT);
DROP FUNCTION IF EXISTS add_feed(uuid, TEXT, TEXT);

-- =============================
-- Function Definitions
-- =============================

CREATE OR REPLACE FUNCTION get_customer_by_id(customer_id uuid)
RETURNS TABLE (id uuid, business_name text) AS $$
BEGIN
    RETURN QUERY
    SELECT c.id, c.business_name
    FROM customers c
    WHERE c.id = customer_id;
END;

$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION get_customer_full(customer_id uuid)
RETURNS TABLE (
    id uuid,
    business_name text
) AS $$
BEGIN
    RETURN QUERY
    SELECT c.id, c.business_name
    FROM customers c
    WHERE c.id = customer_id;
END;
$$ LANGUAGE plpgsql;

-- ==============================
-- 1. GetLatestFeed
-- ==============================

CREATE OR REPLACE FUNCTION get_latest_feed(
    p_search_index_id uuid
)
RETURNS TABLE (
    id uuid,
    search_index_id uuid,
    feed_type text,
    feed_schedule_cron text,
    created_date timestamp,
    superseded_date timestamp,
    is_latest boolean
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        f.id,
        f.search_index_id,
        f.feed_type,
        f.feed_schedule_cron,
        f.created_date,
        f.superseded_date,
        f.is_latest
    FROM feeds f
    WHERE f.search_index_id = p_search_index_id
      AND f.is_latest = 1
    LIMIT 1;
END;
$$ LANGUAGE plpgsql;

-- ==============================
-- 2. GetSearchIndex
-- ==============================

CREATE OR REPLACE FUNCTION get_search_index(
    p_search_index_id uuid,
    p_customer_id uuid
) RETURNS TABLE (
    id uuid,
    customer_id uuid,
    index_name text,
    friendly_name text,
    root_endpoint text,
    pricing_tier text,
    created_date timestamp,
    instance_id uuid,
    service_name text,
    location text,
    instance_pricing_tier text,
    replicas int,
    partitions int,
    is_shared boolean
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        search.id,
        search.customer_id,
        search.index_name,
        search.friendly_name,
        service.root_endpoint,
        service.pricing_tier,
        search.created_date,
        service.id,
        service.service_name,
        service.location,
        service.pricing_tier,
        service.replicas,
        service.partitions,
        service.is_shared
    FROM search_index search
    LEFT OUTER JOIN search_instances service ON service.id = search.search_instance_id
    WHERE search.id = p_search_index_id
      AND search.customer_id = p_customer_id;
END;
$$ LANGUAGE plpgsql;

-- ==============================
-- 3. GetSearchIndexByFriendlyName
-- ==============================

CREATE OR REPLACE FUNCTION get_search_index_by_friendly_name(
    p_customer_id uuid,
    p_friendly_name TEXT
) RETURNS TABLE (
    id uuid,
    search_instance_id uuid,
    customer_id uuid,
    friendly_name text,
    index_name text
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        si.id,
        si.search_instance_id,
        si.customer_id,
        si.friendly_name,
        si.index_name
    FROM dbo.search_index si
    WHERE si.customer_id = p_customer_id
      AND si.friendly_name = p_friendly_name;
END;
$$ LANGUAGE plpgsql;

-- ==============================
-- 4. GetSearchIndexFull
-- ==============================

CREATE OR REPLACE FUNCTION get_search_index_full(
    p_search_index_id uuid,
    p_customer_id uuid
) RETURNS TABLE (
    id uuid,
    customer_id uuid,
    index_name text,
    friendly_name text,
    root_endpoint text,
    pricing_tier text,
    created_date timestamp,
    instance_id uuid,
    service_name text,
    location text,
    instance_pricing_tier text,
    replicas int,
    partitions int,
    is_shared boolean
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        search.id,
        search.customer_id,
        search.index_name,
        search.friendly_name,
        service.root_endpoint,
        service.pricing_tier,
        search.created_date,
        service.id,
        service.service_name,
        service.location,
        service.pricing_tier,
        service.replicas,
        service.partitions,
        service.is_shared
    FROM dbo.search_index search
    LEFT OUTER JOIN dbo.search_instances service ON service.id = search.id
    WHERE search.id = p_search_index_id
      AND search.customer_id = p_customer_id;
END;
$$ LANGUAGE plpgsql;

-- ==============================
-- 5. GetSynonymById
-- ==============================

CREATE OR REPLACE FUNCTION get_synonym_by_id(
    p_search_index_id uuid,
    p_synonym_id uuid
) RETURNS TABLE (
    id uuid,
    search_index_id uuid,
    key text,
    solr_format text,
    created_date timestamp
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        id,
        search_index_id,
        keyword AS key,
        solr_format,
        created_date
    FROM dbo.synonyms
    WHERE search_index_id = p_search_index_id
      AND id = p_synonym_id
      AND is_latest = 1;
END;
$$ LANGUAGE plpgsql;

-- ==============================
-- 6. GetSynonymByKeyWord
-- ==============================

CREATE OR REPLACE FUNCTION get_synonym_by_key_word(
    p_search_index_id uuid,
    p_key_word TEXT
) RETURNS TABLE (
    id uuid,
    search_index_id uuid,
    key text,
    solr_format text,
    created_date timestamp
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        id,
        search_index_id,
        keyword AS key,
        solr_format,
        created_date
    FROM dbo.synonyms
    WHERE search_index_id = p_search_index_id
      AND keyword = p_key_word
      AND is_latest = 1;
END;
$$ LANGUAGE plpgsql;

-- ==============================
-- 7. SupersedeLatestFeed
-- ==============================

CREATE OR REPLACE FUNCTION supersede_latest_feed(
    p_search_index_id uuid
) RETURNS int AS $$
DECLARE
    rows_updated int;
BEGIN
    UPDATE dbo.feeds
    SET is_latest = 0,
        superseded_date = CURRENT_TIMESTAMP
    WHERE search_index_id = p_search_index_id
      AND is_latest = 1;
    GET DIAGNOSTICS rows_updated = ROW_COUNT;
    RETURN rows_updated;
END;
$$ LANGUAGE plpgsql;

-- ==============================
-- 8. SupersedeSynonym
-- ==============================

CREATE OR REPLACE FUNCTION supersede_synonym(
    p_search_index_id uuid,
    p_synonym_id uuid
) RETURNS int AS $$
DECLARE
    rows_updated int;
BEGIN
    UPDATE dbo.synonyms
    SET is_latest = 0,
        superseded_date = CURRENT_TIMESTAMP
    WHERE search_index_id = p_search_index_id
      AND id = p_synonym_id
      AND is_latest = 1;
    GET DIAGNOSTICS rows_updated = ROW_COUNT;
    RETURN rows_updated;
END;
$$ LANGUAGE plpgsql;

-- ==============================
-- 9. UpdateSynonym
-- ==============================

CREATE OR REPLACE FUNCTION update_synonym(
    p_search_index_id uuid,
    p_synonym_id uuid,
    p_key_word TEXT,
    p_solr_format TEXT
) RETURNS int AS $$
DECLARE
    rows_updated int;
BEGIN
    UPDATE dbo.synonyms
    SET keyword = p_key_word,
        solr_format = p_solr_format
    WHERE search_index_id = p_search_index_id
      AND id = p_synonym_id
      AND is_latest = 1;
    GET DIAGNOSTICS rows_updated = ROW_COUNT;
    RETURN rows_updated;
END;
$$ LANGUAGE plpgsql;

-- ==============================
-- 10. DeleteFeedCredentials
-- ==============================

CREATE OR REPLACE FUNCTION delete_feed_credentials(
    p_search_index_id uuid,
    p_username TEXT
) RETURNS int AS $$
DECLARE
    rows_deleted int := 0;
BEGIN
    DELETE FROM dbo.feed_credentials
    WHERE search_index_id = p_search_index_id
      AND username = p_username;
    GET DIAGNOSTICS rows_deleted = ROW_COUNT;
    RETURN rows_deleted;
END;
$$ LANGUAGE plpgsql;

-- ==============================
-- 11. GetFeedCredentials
-- ==============================

CREATE OR REPLACE FUNCTION get_feed_credentials(
    p_search_index_id uuid,
    p_username TEXT
) RETURNS TABLE (
    search_index_id uuid,
    username text,
    created_date timestamp
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        search_index_id,
        username,
        created_date
    FROM dbo.feed_credentials
    WHERE search_index_id = p_search_index_id
      AND username = p_username;
END;
$$ LANGUAGE plpgsql;

-- ==============================
-- 12. UpdateFeedCredentials
-- ==============================

CREATE OR REPLACE FUNCTION update_feed_credentials(
    p_search_index_id uuid,
    p_username TEXT,
    p_password_hash TEXT
) RETURNS int AS $$
DECLARE
    rows_updated int := 0;
BEGIN
    UPDATE dbo.feed_credentials
    SET password_hash = p_password_hash,
        modified_date = CURRENT_TIMESTAMP
    WHERE search_index_id = p_search_index_id
      AND username = p_username;
    GET DIAGNOSTICS rows_updated = ROW_COUNT;
    RETURN rows_updated;
END;
$$ LANGUAGE plpgsql;

-- ==============================
-- 13. AddFeed
-- ==============================

CREATE OR REPLACE FUNCTION add_feed(
    p_search_index_id uuid,
    p_feed_type TEXT,
    p_feed_cron TEXT
) RETURNS int AS $$
DECLARE
    rows_inserted int := 0;
BEGIN
    -- Supersede previous latest feed
    PERFORM supersede_latest_feed(p_search_index_id);

    -- Insert new feed
    INSERT INTO dbo.feeds (
        search_index_id,
        feed_type,
        feed_schedule_cron,
        created_date,
        is_latest
    )
    VALUES (
        p_search_index_id,
        p_feed_type,
        p_feed_cron,
        CURRENT_TIMESTAMP,
        1
    );
    GET DIAGNOSTICS rows_inserted = ROW_COUNT;
    RETURN rows_inserted;
END;
$$ LANGUAGE plpgsql;