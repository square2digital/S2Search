/*
Deployment script for S2_Search

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

-- =============================
DO $$ BEGIN RAISE NOTICE 'Drop Table Definitions Start...'; END $$;
-- =============================
DROP TABLE IF EXISTS customers;
DROP TABLE IF EXISTS feed_credentials;
DROP TABLE IF EXISTS feed_current_documents;
DROP TABLE IF EXISTS feeds;
DROP TABLE IF EXISTS search_configuration;
DROP TABLE IF EXISTS search_index;
DROP TABLE IF EXISTS search_instance_keys;
DROP TABLE IF EXISTS search_instances;
DROP TABLE IF EXISTS synonyms;
DROP TABLE IF EXISTS themes;

DROP TABLE IF EXISTS search_insights_data;
DROP TABLE IF EXISTS search_index_request_log;

-- =============================
DO $$ BEGIN RAISE NOTICE 'Table Definitions'; END $$;
-- =============================
CREATE TABLE customers (
    id                  UUID           NOT NULL,
    business_name       TEXT           NULL,
    customer_endpoint   TEXT           NULL,
    created_date        TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_date       TIMESTAMP      NULL,
    constraint PK_Users PRIMARY KEY (Id)
);

-- =============================
DO $$ BEGIN RAISE NOTICE 'feed_credentials'; END $$;
-- =============================
CREATE TABLE feed_credentials (
    id                 UUID          NOT NULL,
    search_index_id    UUID          NOT NULL,
    username           TEXT          NOT NULL,
    password_hash      TEXT          NOT NULL,
    created_date       TIMESTAMP     NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_date      TIMESTAMP     NULL
);

-- =============================
DO $$ BEGIN RAISE NOTICE 'feed_current_documents'; END $$;
-- =============================
CREATE TABLE feed_current_documents (
    id               TEXT           NOT NULL,
    search_index_id    UUID           NOT NULL,
    created_date      TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- =============================
DO $$ BEGIN RAISE NOTICE 'feeds'; END $$;
-- =============================
CREATE TABLE feeds (
    id               UUID           NOT NULL,
    feed_type         TEXT          NOT NULL,
    feed_schedule_cron TEXT         NOT NULL,
    search_index_id    UUID         NOT NULL,
    data_format       TEXT          NOT NULL,
    created_date      TIMESTAMP     NOT NULL DEFAULT CURRENT_TIMESTAMP,
    superseded_date   TIMESTAMP     NULL,
    is_latest         BOOLEAN       NOT NULL DEFAULT TRUE,
    constraint PK_Feeds PRIMARY KEY (Id)
);

-- =============================
DO $$ BEGIN RAISE NOTICE 'search_configuration'; END $$;
-- =============================
CREATE TABLE search_configuration (
    id               UUID           NOT NULL,
    value            TEXT           NOT NULL,
    search_index_id    UUID         NOT NULL,
    key              TEXT           NOT NULL,
    friendly_name     TEXT          NOT NULL,
    description      TEXT           NOT NULL,
    data_type         TEXT          NOT NULL,
    order_index       INT           NULL,
    created_date      TIMESTAMP     NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_date     TIMESTAMP     NULL,
    constraint PK_SearchConfigurationMappingsCombined PRIMARY KEY (Id)
);

-- =============================
DO $$ BEGIN RAISE NOTICE 'search_index'; END $$;
-- =============================
CREATE TABLE search_index (
    id               UUID           NOT NULL,
    customer_id       UUID          NOT NULL,
    search_instance_id UUID         NULL,
    index_name        TEXT          NOT NULL,
    friendly_name     TEXT          NOT NULL,
    pricing_sku_id     TEXT         NOT NULL,
    created_date      TIMESTAMP     NOT NULL DEFAULT CURRENT_TIMESTAMP,
    constraint PK_SearchIndex PRIMARY KEY (Id)
);

-- =============================
DO $$ BEGIN RAISE NOTICE 'search_instance_keys'; END $$;
-- =============================
CREATE TABLE search_instance_keys (
    id               UUID           NOT NULL,
    search_instance_id UUID           NOT NULL,
    key_type          TEXT           NOT NULL,
    name             TEXT           NOT NULL,
    api_key           TEXT           NOT NULL,
    created_date      TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_date     TIMESTAMP      NULL,
    is_latest         BOOLEAN        NOT NULL DEFAULT TRUE,
    constraint PK_SearchInstanceKeys PRIMARY KEY (Id)
);

-- =============================
DO $$ BEGIN RAISE NOTICE 'search_instances'; END $$;
-- =============================
CREATE TABLE search_instances (
    id                UUID           NOT NULL,
    customer_id       UUID           NOT NULL,
    service_name      TEXT           NOT NULL,
    location          TEXT           NOT NULL,
    pricing_tier      TEXT           NOT NULL,
    replicas          INT            NULL,
    partitions        INT            NULL,
    is_shared         BOOLEAN        NOT NULL,
    type              TEXT           NOT NULL,
    root_endpoint     TEXT           NULL,
    constraint PK_SearchInstances PRIMARY KEY (Id)
);

-- =============================
DO $$ BEGIN RAISE NOTICE 'synonyms'; END $$;
-- =============================
CREATE TABLE synonyms (
    id                 UUID           NOT NULL,
    category           TEXT           NULL,
    search_index_id    UUID           NULL,
    key_word           TEXT           NULL,
    solr_format        TEXT           NOT NULL,
    created_date       TIMESTAMP      NOT NULL,
    superseded_date    TIMESTAMP      NULL,
    is_latest          BOOLEAN        NOT NULL,
    constraint PK_CombinedSynonyms PRIMARY KEY (Id)
);

-- =============================
DO $$ BEGIN RAISE NOTICE 'themes'; END $$;
-- =============================
CREATE TABLE themes (
    id                   UUID         NOT NULL,
    primary_hex_colour   TEXT         NULL,
    secondary_hex_colour TEXT         NULL,
    nav_bar_hex_colour   TEXT         NULL,
    logo_url             TEXT         NULL,
    missing_image_url    TEXT         NULL,
    customer_id          UUID         NULL,
    search_index_id      UUID         NULL,
    created_date         TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_date        TIMESTAMP    NULL,
    constraint PK_Themes PRIMARY KEY (Id)
);

-- =============================
DO $$ BEGIN RAISE NOTICE 'search_insights_data'; END $$;
-- =============================
CREATE TABLE search_insights_data (
    id               UUID           NOT NULL DEFAULT gen_random_uuid(),
    search_index_id    UUID         NOT NULL,
    data_category     TEXT          NOT NULL,
    data_point        TEXT          NOT NULL,
    count            INT            NOT NULL DEFAULT 0,
    date             TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_date      TIMESTAMP     NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_date     TIMESTAMP     NULL,
    constraint PK_SearchInsightsData PRIMARY KEY (Id)
);

-- =============================
DO $$ BEGIN RAISE NOTICE 'search_index_request_log'; END $$;
-- =============================
CREATE TABLE search_index_request_log (
    id               UUID         NOT NULL DEFAULT gen_random_uuid(),
    search_index_id  UUID         NOT NULL,
    count            INT          NOT NULL DEFAULT 0,
    date             TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_date     TIMESTAMP    NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_date    TIMESTAMP    NULL,
    constraint PK_SearchIndexRequestLog PRIMARY KEY (Id)
);

-- =============================
DO $$ BEGIN RAISE NOTICE 'Drop Function Definitions'; END $$;
-- =============================
DROP FUNCTION IF EXISTS add_search_index(uuid, uuid, uuid, TEXT, TEXT);
DROP FUNCTION IF EXISTS add_synonym(uuid, uuid, TEXT, TEXT);
DROP FUNCTION IF EXISTS get_customer_by_id(uuid);
DROP FUNCTION IF EXISTS get_customer_full(uuid);
DROP FUNCTION IF EXISTS get_latest_feed(uuid);
DROP FUNCTION IF EXISTS get_search_index(uuid, uuid);
DROP FUNCTION IF EXISTS get_search_index_by_friendly_name(uuid, TEXT);
DROP FUNCTION IF EXISTS get_search_index_full(uuid, uuid);
DROP FUNCTION IF EXISTS get_search_index_query_credentials_by_customer_endpoint(TEXT);
DROP FUNCTION IF EXISTS get_search_insights_by_data_categories(uuid, TIMESTAMP, TIMESTAMP, TEXT);
DROP FUNCTION IF EXISTS get_search_insights_search_count_by_date_range(uuid, TIMESTAMP, TIMESTAMP);
DROP FUNCTION IF EXISTS get_synonym_by_id(uuid, uuid);
DROP FUNCTION IF EXISTS get_synonym_by_key_word(uuid, TEXT);
DROP FUNCTION IF EXISTS get_synonyms(uuid);
DROP FUNCTION IF EXISTS get_theme_by_customer_id(uuid);
DROP FUNCTION IF EXISTS get_theme_by_id(uuid);
DROP FUNCTION IF EXISTS get_theme_by_search_index_id(uuid);
DROP FUNCTION IF EXISTS supersede_latest_feed(uuid);
DROP FUNCTION IF EXISTS supersede_synonym(uuid, uuid);
DROP FUNCTION IF EXISTS update_synonym(uuid, uuid, TEXT, TEXT);
DROP FUNCTION IF EXISTS update_theme(uuid, TEXT, TEXT, TEXT, TEXT, TEXT);
DROP FUNCTION IF EXISTS get_search_index_query_credentials_by_customer_endpoint(TEXT);
DROP FUNCTION IF EXISTS get_current_feed_documents(uuid, INT, INT);
DROP FUNCTION IF EXISTS get_current_feed_documents_total(uuid);
DROP FUNCTION IF EXISTS get_feed_credentials_username(uuid);
DROP FUNCTION IF EXISTS get_feed_data_format(uuid, TEXT);
DROP FUNCTION IF EXISTS get_latest_generic_synonyms_by_catery(TEXT);
DROP FUNCTION IF EXISTS get_search_index_credentials(uuid, TEXT);
DROP FUNCTION IF EXISTS get_search_index_feed_processing_data(uuid, TEXT);
DROP FUNCTION IF EXISTS merge_feed_documents(uuid, new_feed_documents);
DROP FUNCTION IF EXISTS add_data_points(uuid, search_insights_data);
DROP FUNCTION IF EXISTS add_search_request(uuid, DATE);
DROP FUNCTION IF EXISTS add_feed_credentials(uuid, TEXT, TEXT);
DROP FUNCTION IF EXISTS delete_feed_credentials(uuid, TEXT);
DROP FUNCTION IF EXISTS get_feed_credentials(uuid, TEXT);
DROP FUNCTION IF EXISTS update_feed_credentials(uuid, TEXT, TEXT);
DROP FUNCTION IF EXISTS add_feed(uuid, TEXT, TEXT);
DROP FUNCTION IF EXISTS get_theme_by_customer_endpoint(TEXT);
DROP FUNCTION IF EXISTS add_search_index(UUID, UUID, TEXT, TEXT, UUID);


-- =============================
DO $$ BEGIN RAISE NOTICE 'Function Definitions'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_customer_by_id(customer_id uuid)
RETURNS TABLE (id uuid, business_name text) AS $$
BEGIN
    RETURN QUERY
    SELECT c.id, c.business_name
    FROM customers c
    WHERE c.id = customer_id;
END;

$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION get_customer_full(customer_id uuid)
RETURNS TABLE (
    id uuid,
    business_name text
) AS $$
BEGIN
    RETURN QUERY
    SELECT c.id, c.business_name
    FROM customers c
    WHERE c.id = customer_id;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '1. GetLatestFeed'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_latest_feed(
    p_search_index_id uuid
)
RETURNS TABLE (
    id uuid,
    search_index_id uuid,
    feed_type text,
    feed_schedule_cron text,
    created_date timestamp,
    superseded_date timestamp,
    is_latest boolean
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        f.id,
        f.search_index_id,
        f.feed_type,
        f.feed_schedule_cron,
        f.created_date,
        f.superseded_date,
        f.is_latest
    FROM feeds f
    WHERE f.search_index_id = p_search_index_id
      AND f.is_latest = TRUE
    LIMIT 1;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '2. GetSearchIndex'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_search_index(
    p_search_index_id uuid,
    p_customer_id uuid
) RETURNS TABLE (
    id uuid,
    customer_id uuid,
    index_name text,
    friendly_name text,
    root_endpoint text,
    pricing_tier text,
    created_date timestamp,
    instance_id uuid,
    service_name text,
    location text,
    instance_pricing_tier text,
    replicas int,
    partitions int,
    is_shared boolean
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        search.id,
        search.customer_id,
        search.index_name,
        search.friendly_name,
        service.root_endpoint,
        service.pricing_tier,
        search.created_date,
        service.id,
        service.service_name,
        service.location,
        service.pricing_tier,
        service.replicas,
        service.partitions,
        service.is_shared
    FROM search_index search
    LEFT OUTER JOIN search_instances service ON service.id = search.search_instance_id
    WHERE search.id = p_search_index_id
      AND search.customer_id = p_customer_id;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '3. GetSearchIndexByFriendlyName'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_search_index_by_friendly_name(
    p_customer_id uuid,
    p_friendly_name TEXT
) RETURNS TABLE (
    id uuid,
    search_instance_id uuid,
    customer_id uuid,
    friendly_name text,
    index_name text
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        si.id,
        si.search_instance_id,
        si.customer_id,
        si.friendly_name,
        si.index_name
    FROM search_index si
    WHERE si.customer_id = p_customer_id
      AND si.friendly_name = p_friendly_name;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '4. GetSearchIndexFull'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_search_index_full(
    p_search_index_id uuid,
    p_customer_id uuid
) RETURNS TABLE (
    id uuid,
    customer_id uuid,
    index_name text,
    friendly_name text,
    root_endpoint text,
    pricing_tier text,
    created_date timestamp,
    instance_id uuid,
    service_name text,
    location text,
    instance_pricing_tier text,
    replicas int,
    partitions int,
    is_shared boolean
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        search.id,
        search.customer_id,
        search.index_name,
        search.friendly_name,
        service.root_endpoint,
        service.pricing_tier,
        search.created_date,
        service.id,
        service.service_name,
        service.location,
        service.pricing_tier,
        service.replicas,
        service.partitions,
        service.is_shared
    FROM search_index search
    LEFT OUTER JOIN search_instances service ON service.id = search.search_instance_id
    WHERE search.id = p_search_index_id
      AND search.customer_id = p_customer_id;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '5. GetSynonymById'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_synonym_by_id(
    p_search_index_id uuid,
    p_synonym_id uuid
) RETURNS TABLE (
    id uuid,
    search_index_id uuid,
    key text,
    solr_format text,
    created_date timestamp
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        id,
        search_index_id,
        key_word AS key,
        solr_format,
        created_date
    FROM synonyms
    WHERE search_index_id = p_search_index_id
      AND id = p_synonym_id
      AND is_latest = TRUE;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '6. GetSynonymByKeyWord'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_synonym_by_key_word(
    p_search_index_id uuid,
    p_key_word TEXT
) RETURNS TABLE (
    id uuid,
    search_index_id uuid,
    key text,
    solr_format text,
    created_date timestamp
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        id,
        search_index_id,
        key_word AS key,
        solr_format,
        created_date
    FROM synonyms
    WHERE search_index_id = p_search_index_id
      AND key_word = p_key_word
      AND is_latest = TRUE;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '7. SupersedeLatestFeed'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION supersede_latest_feed(
    p_search_index_id uuid
) RETURNS int AS $$
DECLARE
    rows_updated int;
BEGIN
    UPDATE feeds
    SET is_latest = FALSE,
        superseded_date = CURRENT_TIMESTAMP
    WHERE search_index_id = p_search_index_id
      AND is_latest = TRUE;
    GET DIAGNOSTICS rows_updated = ROW_COUNT;
    RETURN rows_updated;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '8. SupersedeSynonym'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION supersede_synonym(
    p_search_index_id uuid,
    p_synonym_id uuid
) RETURNS int AS $$
DECLARE
    rows_updated int;
BEGIN
    UPDATE synonyms
    SET is_latest = FALSE,
        superseded_date = CURRENT_TIMESTAMP
    WHERE search_index_id = p_search_index_id
      AND id = p_synonym_id
      AND is_latest = TRUE;
    GET DIAGNOSTICS rows_updated = ROW_COUNT;
    RETURN rows_updated;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '9. UpdateSynonym'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION update_synonym(
    p_search_index_id uuid,
    p_synonym_id uuid,
    p_key_word TEXT,
    p_solr_format TEXT
) RETURNS int AS $$
DECLARE
    rows_updated int;
BEGIN
    UPDATE synonyms
    SET key_word = p_key_word,
        solr_format = p_solr_format
    WHERE search_index_id = p_search_index_id
      AND id = p_synonym_id
      AND is_latest = TRUE;
    GET DIAGNOSTICS rows_updated = ROW_COUNT;
    RETURN rows_updated;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '10. DeleteFeedCredentials'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION delete_feed_credentials(
    p_search_index_id uuid,
    p_username TEXT
) RETURNS int AS $$
DECLARE
    rows_deleted int := 0;
BEGIN
    DELETE FROM feed_credentials
    WHERE search_index_id = p_search_index_id
      AND username = p_username;
    GET DIAGNOSTICS rows_deleted = ROW_COUNT;
    RETURN rows_deleted;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '11. GetFeedCredentials'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_feed_credentials(
    p_search_index_id uuid,
    p_username TEXT
) RETURNS TABLE (
    search_index_id uuid,
    username text,
    created_date timestamp
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        search_index_id,
        username,
        created_date
    FROM feed_credentials
    WHERE search_index_id = p_search_index_id
      AND username = p_username;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '12. UpdateFeedCredentials'; END $$;
--==============================
CREATE OR REPLACE FUNCTION update_feed_credentials(
    p_search_index_id uuid,
    p_username TEXT,
    p_password_hash TEXT
) RETURNS int AS $$
DECLARE
    rows_updated int := 0;
BEGIN
    UPDATE feed_credentials
    SET password_hash = p_password_hash,
        modified_date = CURRENT_TIMESTAMP
    WHERE search_index_id = p_search_index_id
      AND username = p_username;
    GET DIAGNOSTICS rows_updated = ROW_COUNT;
    RETURN rows_updated;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '13. AddFeed'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION add_feed(
    p_search_index_id uuid,
    p_feed_type TEXT,
    p_feed_cron TEXT
) RETURNS int AS $$
DECLARE
    rows_inserted int := 0;
BEGIN
    -- Supersede previous latest feed
    PERFORM supersede_latest_feed(p_search_index_id);

    -- Insert new feed
    INSERT INTO feeds (
        search_index_id,
        feed_type,
        feed_schedule_cron,
        created_date,
        is_latest
    )
    VALUES (
        p_search_index_id,
        p_feed_type,
        p_feed_cron,
        CURRENT_TIMESTAMP,
        TRUE
    );
    GET DIAGNOSTICS rows_inserted = ROW_COUNT;
    RETURN rows_inserted;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '14. add_search_index'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION add_search_index(
    p_search_index_id UUID,
    p_customer_id UUID,
    p_index_name TEXT,
    p_friendly_name TEXT,
    p_search_instance_id UUID DEFAULT NULL
)
RETURNS VOID AS $$
BEGIN
    INSERT INTO search_index (
        id,
        search_instance_id,
        customer_id,
        index_name,
        friendly_name,
        created_date
    )
    VALUES (
        p_search_index_id,
        p_search_instance_id,
        p_customer_id,
        p_index_name,
        p_friendly_name,
        CURRENT_TIMESTAMP AT TIME ZONE 'UTC'
    );
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '15. dd_synonym'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION add_synonym(
    p_synonym_id UUID,
    p_search_index_id UUID,
    p_key_word TEXT,
    p_solr_format TEXT
)
RETURNS UUID AS $$
BEGIN
    INSERT INTO synonyms (
        id,
        search_index_id,
        key_word,
        solr_format
    )
    VALUES (
        p_synonym_id,
        p_search_index_id,
        p_key_word,
        p_solr_format
    );

    RETURN p_synonym_id;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '16. get_search_insights_by_data_categories'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_search_insights_by_data_categories(
    p_search_index_id UUID,
    p_date_from TIMESTAMP,
    p_date_to TIMESTAMP,
    p_data_categories TEXT
)
RETURNS TABLE (
    data_category TEXT,
    data_point TEXT,
    date DATE,
    count INTEGER
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        d.data_category,
        d.data_point,
        d.date,
        d.count
    FROM search_insights_data d
    JOIN unnest(string_to_array(p_data_categories, ',')) AS category(value)
        ON category.value = d.data_category
    WHERE d.search_index_id = p_search_index_id
      AND d.date >= p_date_from
      AND d.date <= p_date_to;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '17. get_search_insights_search_count_by_date_range'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_search_insights_search_count_by_date_range(
    p_search_index_id UUID,
    p_date_from TIMESTAMP,
    p_date_to TIMESTAMP
)
RETURNS TABLE (
    date DATE,
    count INTEGER
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        d.date,
        d.count
    FROM search_index_request_log d
    WHERE d.search_index_id = p_search_index_id
      AND d.date BETWEEN p_date_from AND p_date_to;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '18. get_synonyms'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_synonyms(
    p_search_index_id UUID
)
RETURNS TABLE (
    id UUID,
    search_index_id UUID,
    key TEXT,
    solr_format TEXT,
    created_date TIMESTAMP
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        s.id,
        s.search_index_id,
        s.key_word AS key,
        s.solr_format,
        s.created_date
    FROM synonyms s
    WHERE s.search_index_id = p_search_index_id
      AND s.is_latest = TRUE;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '19. get_theme_by_customer_id'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_theme_by_customer_id(
    p_customer_id UUID
)
RETURNS TABLE (
    id UUID,
    primary_hex_colour TEXT,
    secondary_hex_colour TEXT,
    nav_bar_hex_colour TEXT,
    logo_url TEXT,
    missing_image_url TEXT,
    customer_id UUID,
    search_index_id UUID,
    created_date TIMESTAMP,
    modified_date TIMESTAMP
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        t.id,
        t.primary_hex_colour,
        t.secondary_hex_colour,
        t.nav_bar_hex_colour,
        t.logo_url,
        t.missing_image_url,
        t.customer_id,
        t.search_index_id,
        t.created_date,
        t.modified_date
    FROM themes t
    WHERE t.customer_id = p_customer_id;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '20. get_theme_by_id'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_theme_by_id(
    p_theme_id UUID
)
RETURNS TABLE (
    id UUID,
    primary_hex_colour TEXT,
    secondary_hex_colour TEXT,
    nav_bar_hex_colour TEXT,
    logo_url TEXT,
    missing_image_url TEXT,
    customer_id UUID,
    search_index_id UUID,
    created_date TIMESTAMP,
    modified_date TIMESTAMP
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        t.id,
        t.primary_hex_colour,
        t.secondary_hex_colour,
        t.nav_bar_hex_colour,
        t.logo_url,
        t.missing_image_url,
        t.customer_id,
        t.search_index_id,
        t.created_date,
        t.modified_date
    FROM themes t
    WHERE t.id = p_theme_id;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '21. get_theme_by_search_index_id'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_theme_by_search_index_id(
    p_search_index_id UUID
)
RETURNS TABLE (
    id UUID,
    primary_hex_colour TEXT,
    secondary_hex_colour TEXT,
    nav_bar_hex_colour TEXT,
    logo_url TEXT,
    missing_image_url TEXT,
    customer_id UUID,
    search_index_id UUID,
    created_date TIMESTAMP,
    modified_date TIMESTAMP
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        t.id,
        t.primary_hex_colour,
        t.secondary_hex_colour,
        t.nav_bar_hex_colour,
        t.logo_url,
        t.missing_image_url,
        t.customer_id,
        t.search_index_id,
        t.created_date,
        t.modified_date
    FROM themes t
    WHERE t.search_index_id = p_search_index_id;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '22. update_theme'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION update_theme(
    p_theme_id UUID,
    p_primary_hex_colour TEXT,
    p_secondary_hex_colour TEXT,
    p_nav_bar_hex_colour TEXT,
    p_logo_url TEXT,
    p_missing_image_url TEXT
)
RETURNS VOID AS $$
BEGIN
    UPDATE themes
    SET
        primary_hex_colour = p_primary_hex_colour,
        secondary_hex_colour = p_secondary_hex_colour,
        nav_bar_hex_colour = p_nav_bar_hex_colour,
        logo_url = p_logo_url,
        missing_image_url = p_missing_image_url,
        modified_date = CURRENT_TIMESTAMP AT TIME ZONE 'UTC'
    WHERE id = p_theme_id;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '23. get_theme_by_customer_endpoint'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_theme_by_customer_endpoint(
    p_customer_endpoint TEXT
)
RETURNS TABLE (
    id UUID,
    primary_hex_colour TEXT,
    secondary_hex_colour TEXT,
    nav_bar_hex_colour TEXT,
    logo_url TEXT,
    missing_image_url TEXT
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        t.id,
        t.primary_hex_colour,
        t.secondary_hex_colour,
        t.nav_bar_hex_colour,
        t.logo_url,
        t.missing_image_url
    FROM themes t
    INNER JOIN customers c ON t.customer_id = c.id
    WHERE c.customer_endpoint = p_customer_endpoint;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '24. get_search_index_query_credentials_by_customer_endpoint'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_search_index_query_credentials_by_customer_endpoint(
    p_customer_endpoint TEXT
)
RETURNS TABLE (
    id UUID,
    search_index_name TEXT,
    search_instance_name TEXT,
    search_instance_endpoint TEXT,
    api_key TEXT
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        si.id,
        LOWER(si.index_name) AS search_index_name,
        i.service_name AS search_instance_name,
        i.root_endpoint AS search_instance_endpoint,
        ik.api_key
    FROM search_index si
    INNER JOIN search_instances i ON i.id = si.search_instance_id
    INNER JOIN customers c ON si.customer_id = c.id
    INNER JOIN search_instance_keys ik ON ik.search_instance_id = i.id
        AND ik.key_type = 'Query'
        AND ik.name = 'Query key'
        AND ik.is_latest = TRUE
    WHERE c.customer_endpoint = p_customer_endpoint;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '25. get_feed_credentials_username'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_feed_credentials_username(
    p_search_index_id UUID
)
RETURNS TABLE (
    search_index_id UUID,
    username TEXT,
    created_date TIMESTAMP,
    modified_date TIMESTAMP
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        fc.search_index_id,
        fc.username,
        fc.created_date,
        fc.modified_date
    FROM feed_credentials fc
    WHERE fc.search_index_id = p_search_index_id
    ORDER BY fc.created_date
    LIMIT 1;
END;
$$ LANGUAGE plpgsql;

-- =============================
DO $$ BEGIN RAISE NOTICE '26. get_feed_credentials'; END $$;
-- =============================
CREATE OR REPLACE FUNCTION get_feed_credentials(
    p_search_index_id UUID,
    p_username TEXT
)
RETURNS TABLE (
    search_index_id UUID,
    username TEXT,
    created_date TIMESTAMP
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        fc.search_index_id,
        fc.username,
        fc.created_date
    FROM feed_credentials fc
    WHERE fc.search_index_id = p_search_index_id
      AND fc.username = p_username;
END;
$$ LANGUAGE plpgsql;